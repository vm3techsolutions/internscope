"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.main = void 0;
/* eslint-disable no-console */
const cli_1 = require("@graphql-codegen/cli");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const get_b_gsdk_config_1 = require("./util/get-b-gsdk-config");
const get_b_gsdk_directory_path_1 = require("./util/get-b-gsdk-directory-path");
const API_VERSION = '2022-07';
async function main(args) {
    const bgsdkDirectoryPath = (0, get_b_gsdk_directory_path_1.getBGsdkDirectoryPath)(process.cwd(), args['--dir']);
    const defaultGqlPath = path_1.default.join(process.cwd(), 'node_modules', 'react-dropify', 'default-gql');
    if (!bgsdkDirectoryPath) {
        throw new Error('Make sure you have a react-dropify directory in the root of your project.');
    }
    const config = (0, get_b_gsdk_config_1.getBGsdkConfig)(bgsdkDirectoryPath);
    const endpoint = `https://${config.domain}/api/${API_VERSION}/graphql`;
    const codegenOutput = await (0, cli_1.generate)({
        schema: {
            [endpoint]: {
                headers: {
                    'x-shopify-storefront-access-token': config.accessToken
                }
            }
        },
        generates: {
            [__dirname + '/generated/index.ts']: {
                documents: [
                    bgsdkDirectoryPath + '/**/*.{gql,graphql}',
                    bgsdkDirectoryPath + '/*.{gql,graphql}',
                    defaultGqlPath + '/**/*.{gql,graphql}'
                ],
                plugins: [
                    'typescript',
                    'typescript-operations',
                    'typescript-graphql-request'
                ]
            },
            [__dirname + '/generated/graphql.schema.json']: {
                plugins: ['introspection'],
                config: {
                    documentMode: 'documentNode',
                    withHooks: true
                }
            }
        }
    }, false);
    const schemaCodegen = codegenOutput[0].content.startsWith('{')
        ? codegenOutput[0]
        : codegenOutput[1];
    const sdkCodegen = codegenOutput[0].content.startsWith('{')
        ? codegenOutput[1]
        : codegenOutput[0];
    createDirIfDoesNotExist(`${bgsdkDirectoryPath}/generated`);
    fs_1.default.writeFileSync(path_1.default.join(bgsdkDirectoryPath, 'generated/graphql.schema.json'), schemaCodegen.content);
    fs_1.default.writeFileSync(path_1.default.join(bgsdkDirectoryPath, 'generated/index.ts'), '/* eslint-disable */\n' + sdkCodegen.content + '\n' + extraGenerated);
    const skdFilePath = path_1.default.join(bgsdkDirectoryPath, 'sdk.ts');
    if (!fs_1.default.existsSync(skdFilePath)) {
        fs_1.default.writeFileSync(skdFilePath, sdkFileContents);
    }
    console.log('Done âœ¨');
}
exports.main = main;
function createDirIfDoesNotExist(p) {
    if (!fs_1.default.existsSync(p)) {
        fs_1.default.mkdirSync(p);
    }
}
const extraGenerated = `export type CreateReactDropifySdkParams = {
  domain: string
  accessToken: string
}

export const createReactDropifySdk = ({
  domain,
  accessToken
}: CreateReactDropifySdkParams) => {
  const endpoint = \`https://\${domain}/api/${API_VERSION}/graphql\`
  const graphQLClient = new GraphQLClient(endpoint, {
    headers: {
      accept: 'application/json',
      'Content-Type': 'application/json',
      'x-shopify-storefront-access-token': accessToken
    }
  })

  const generatedSdk = getSdk(graphQLClient)

  return { ...generatedSdk, client: graphQLClient }
}`;
const sdkFileContents = `import config from './config'
import { createReactDropifySdk } from './generated'

export const reactDropifySdk = createReactDropifySdk(config)
`;
