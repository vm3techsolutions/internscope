import { _ProductFragment } from '../lib/shopify/storefront/generated';
declare type BareBonesVariant = Pick<_ProductFragment['variants']['edges'][0]['node'], 'availableForSale' | 'compareAtPriceV2' | 'priceV2' | 'selectedOptions' | 'id'>;
declare type BareBonesProduct = Pick<_ProductFragment, 'options' | 'availableForSale'> & {
    variants: {
        edges: Array<{
            node: BareBonesVariant;
        }>;
    };
} & {
    [key: string]: unknown;
};
export declare const useProductHelper: (product: BareBonesProduct) => {
    handleSelectOption: (name: string, value: string | undefined) => void;
    handleAddToCart: (options?: {
        quantity?: number | undefined;
        openCartOnSuccess?: boolean | undefined;
        onSuccess?: (() => void) | undefined;
        onError?: ((error: unknown) => void) | undefined;
        onSettle?: (() => void) | undefined;
    } | undefined) => Promise<void>;
    optionsToSelect: {
        values: {
            value: string;
            disabled: boolean;
        }[];
        __typename?: "ProductOption" | undefined;
        name: string;
    }[];
    selectedVariant: {
        node: BareBonesVariant;
    } | undefined;
    discount: {
        percentage: number;
        raw: number;
    } | null;
    isProductSoldOut: boolean;
    isSelectedVariantSoldOut: boolean | undefined;
    selectedOptions: Record<string, string | undefined>;
    hasOneOptionSelected: boolean;
    hasAllOptionsSelected: boolean;
    hasNoOptions: boolean;
};
export {};
