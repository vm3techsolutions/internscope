import React__default, { useState, useMemo, useCallback, useContext, createContext, createElement, useEffect, Fragment, memo } from 'react';
import useSWR from 'swr';
import EventEmitter from 'events';
import create from 'zustand';
import createContext$1 from 'zustand/context';
import shallow from 'zustand/shallow';
import { GraphQLClient } from 'graphql-request';
import gql from 'graphql-tag';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _taggedTemplateLiteralLoose(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  strings.raw = raw;
  return strings;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime_1 = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  define(Gp, iteratorSymbol, function() {
    return this;
  });

  define(Gp, "toString", function() {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}
});

var isClient = typeof window !== 'undefined';

var formatError = function formatError(error) {
  if (error instanceof Error) {
    return error;
  }

  if (typeof error === 'string') {
    return new Error(error);
  }

  if (typeof error === 'object') {
    return new Error(JSON.stringify(error, null, 2));
  }

  return new Error("Unknown error: " + error);
};
var isApiSupported = function isApiSupported(api) {
  return isClient && api in window;
};
var formatter = /*#__PURE__*/new Intl.NumberFormat('en-US', {
  style: 'currency',
  currency: 'USD',
  minimumFractionDigits: 2
});
var formatPrice = function formatPrice(amount) {
  return formatter.format(parseFloat(amount != null ? amount : '0'));
};

var useEmailSubscriptionForm = function useEmailSubscriptionForm(_ref) {
  var submit = _ref.submit,
      emailInputPropsOverride = _ref.emailInputProps,
      resetOnSuccess = _ref.resetOnSuccess;

  var _React$useState = useState(),
      status = _React$useState[0],
      setStatus = _React$useState[1];

  var _React$useState2 = useState(),
      error = _React$useState2[0],
      setError = _React$useState2[1];

  var emailInputProps = useMemo(function () {
    return _extends({
      placeholder: 'Enter your email to get notified.',
      autoComplete: 'email',
      type: 'email',
      required: true,
      name: 'email'
    }, emailInputPropsOverride);
  }, [emailInputPropsOverride]);
  var onSubmit = useCallback( /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(e) {
      var form, email;
      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              e.preventDefault();
              form = e.currentTarget;
              email = form.email.value;
              setStatus('submitting');
              _context.prev = 4;
              _context.next = 7;
              return submit(email);

            case 7:
              setStatus('success');
              if (resetOnSuccess) form.reset();
              _context.next = 15;
              break;

            case 11:
              _context.prev = 11;
              _context.t0 = _context["catch"](4);
              setStatus('error');
              setError(formatError(_context.t0).message);

            case 15:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[4, 11]]);
    }));

    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }(), [submit, resetOnSuccess]);
  return {
    emailInputProps: emailInputProps,
    onSubmit: onSubmit,
    status: status,
    setStatus: setStatus,
    error: error
  };
};

var useToggleState = function useToggleState(initialState) {
  if (initialState === void 0) {
    initialState = false;
  }

  var _React$useState = useState(initialState),
      isOn = _React$useState[0],
      setIsOn = _React$useState[1];

  var handleOn = useCallback(function () {
    setIsOn(true);
  }, []);
  var handleOff = useCallback(function () {
    setIsOn(false);
  }, []);
  var handleToggle = useCallback(function () {
    setIsOn(function (p) {
      return !p;
    });
  }, []);
  return {
    isOn: isOn,
    handleToggle: handleToggle,
    handleOn: handleOn,
    handleOff: handleOff
  };
};

var storefrontEvents = /*#__PURE__*/new EventEmitter();

var Context = /*#__PURE__*/createContext(undefined);

var InternalContextProvider = function InternalContextProvider(_ref) {
  var children = _ref.children,
      client = _ref.client,
      appCartId = _ref.appCartId;
  var cartToggleState = useToggleState();

  var _useSWR = useSWR('cart', cartFetcher, {
    revalidateIfStale: false,
    revalidateOnFocus: false,
    revalidateOnReconnect: false
  }),
      cart = _useSWR.data,
      mutate = _useSWR.mutate;

  var cartLocalStorage = useMemo(function () {
    return {
      set: function set(id) {
        localStorage.setItem(appCartId + "-cart-id", id);
      },
      get: function get() {
        return localStorage.getItem(appCartId + "-cart-id");
      },
      clear: function clear() {
        return localStorage.removeItem(appCartId + "-cart-id");
      }
    };
  }, [appCartId]);

  function cartFetcher() {
    return _cartFetcher.apply(this, arguments);
  }

  function _cartFetcher() {
    _cartFetcher = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6() {
      var id, _yield$client$_FetchC, _cart5, err, formattedError;

      return runtime_1.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.prev = 0;
              id = cartLocalStorage.get();

              if (id) {
                _context6.next = 4;
                break;
              }

              return _context6.abrupt("return", null);

            case 4:
              _context6.next = 6;
              return client._FetchCart({
                id: id
              });

            case 6:
              _yield$client$_FetchC = _context6.sent;
              _cart5 = _yield$client$_FetchC.cart;

              if (_cart5) {
                storefrontEvents.emit('createCartSuccess', _cart5);
                storefrontEvents.emit('allSuccesses', {
                  type: 'createCartSuccess',
                  data: _cart5
                });
              } else {
                cartLocalStorage.clear();
                err = new Error('Could not find cart in cartFetcher');
                storefrontEvents.emit('fetchCartError', err);
                storefrontEvents.emit('allErrors', {
                  type: 'fetchCartError',
                  error: err
                });
              }

              return _context6.abrupt("return", _cart5);

            case 12:
              _context6.prev = 12;
              _context6.t0 = _context6["catch"](0);
              formattedError = formatError(_context6.t0);

              if (formattedError.message.includes('Variable $id of type ID! was provided invalid value')) {
                cartLocalStorage.clear();
              }

              storefrontEvents.emit('fetchCartError', formattedError);
              storefrontEvents.emit('allErrors', {
                type: 'fetchCartError',
                error: formattedError
              });
              return _context6.abrupt("return", undefined);

            case 19:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, null, [[0, 12]]);
    }));
    return _cartFetcher.apply(this, arguments);
  }

  var createCart = useCallback( /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(lines) {
      var _data$cartCreate, _data$cartCreate2, data, _cart, cartId, formattedError;

      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;

              if (!lines) {
                _context.next = 7;
                break;
              }

              _context.next = 4;
              return client._CreateCartWithLines({
                lines: lines
              });

            case 4:
              _context.t0 = _context.sent;
              _context.next = 10;
              break;

            case 7:
              _context.next = 9;
              return client._CreateCart();

            case 9:
              _context.t0 = _context.sent;

            case 10:
              data = _context.t0;
              _cart = (_data$cartCreate = data.cartCreate) == null ? void 0 : _data$cartCreate.cart;
              cartId = _cart == null ? void 0 : _cart.id;

              if (_cart && cartId) {
                mutate(_cart, false);
                cartLocalStorage.set(cartId != null ? cartId : '');
                storefrontEvents.emit('createCartSuccess', _cart);
                storefrontEvents.emit('allSuccesses', {
                  type: 'createCartSuccess',
                  data: _cart
                });
              }

              (_data$cartCreate2 = data.cartCreate) == null ? void 0 : _data$cartCreate2.userErrors.forEach(function (error) {
                var err = new Error(error.code + ": " + error.message);
                storefrontEvents.emit('createCartError', err);
                storefrontEvents.emit('allErrors', {
                  type: 'createCartError',
                  error: err
                });
              });
              return _context.abrupt("return", _cart);

            case 18:
              _context.prev = 18;
              _context.t1 = _context["catch"](0);
              formattedError = formatError(_context.t1);
              storefrontEvents.emit('createCartError', formattedError);
              storefrontEvents.emit('allErrors', {
                type: 'createCartError',
                error: formattedError
              });
              return _context.abrupt("return", null);

            case 24:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[0, 18]]);
    }));

    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }(), [cartLocalStorage, client, mutate]);
  var getOrCreateCart = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2() {
    return runtime_1.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!cart) {
              _context2.next = 2;
              break;
            }

            return _context2.abrupt("return", cart);

          case 2:
            return _context2.abrupt("return", createCart());

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  })), [cart, createCart]);
  var onAddLineItem = useCallback( /*#__PURE__*/function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(lineItem, dontMutateState) {
      var _cart2, localStorageCheckoutId, _yield$client$_AddLin, cartLinesAdd, formattedError;

      return runtime_1.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (dontMutateState === void 0) {
                dontMutateState = false;
              }

              _context3.prev = 1;
              localStorageCheckoutId = cartLocalStorage.get();

              if (localStorageCheckoutId) {
                _context3.next = 9;
                break;
              }

              _context3.next = 6;
              return createCart([lineItem]);

            case 6:
              _cart2 = _context3.sent;
              _context3.next = 15;
              break;

            case 9:
              _context3.next = 11;
              return client._AddLineItem({
                cartId: localStorageCheckoutId,
                lines: [lineItem]
              });

            case 11:
              _yield$client$_AddLin = _context3.sent;
              cartLinesAdd = _yield$client$_AddLin.cartLinesAdd;
              _cart2 = cartLinesAdd == null ? void 0 : cartLinesAdd.cart;
              cartLinesAdd == null ? void 0 : cartLinesAdd.userErrors.forEach(function (error) {
                var err = new Error(error.code + ": " + error.message);
                storefrontEvents.emit('addLineItemError', err);
                storefrontEvents.emit('allErrors', {
                  type: 'addLineItemError',
                  error: err
                });
              });

            case 15:
              if (_cart2 && !dontMutateState) {
                mutate(_cart2, false);
              }

              if (_cart2) {
                storefrontEvents.emit('addLineItemSuccess', _cart2);
                storefrontEvents.emit('allSuccesses', {
                  type: 'addLineItemSuccess',
                  data: _cart2
                });
              }

              _context3.next = 24;
              break;

            case 19:
              _context3.prev = 19;
              _context3.t0 = _context3["catch"](1);
              formattedError = formatError(_context3.t0);
              storefrontEvents.emit('addLineItemError', formattedError);
              storefrontEvents.emit('allErrors', {
                type: 'addLineItemError',
                error: formattedError
              });

            case 24:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, null, [[1, 19]]);
    }));

    return function (_x2, _x3) {
      return _ref4.apply(this, arguments);
    };
  }(), [cartLocalStorage, client, createCart, mutate]);
  var onUpdateLineItem = useCallback( /*#__PURE__*/function () {
    var _ref6 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(_ref5, dontMutateState) {
      var merchandiseId, quantity, attributes, id, _yield$client$_Update, cartLinesUpdate, _cart3, formattedError;

      return runtime_1.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              merchandiseId = _ref5.merchandiseId, quantity = _ref5.quantity, attributes = _ref5.attributes;

              if (dontMutateState === void 0) {
                dontMutateState = false;
              }

              _context4.prev = 2;
              id = cartLocalStorage.get();

              if (id) {
                _context4.next = 6;
                break;
              }

              return _context4.abrupt("return");

            case 6:
              _context4.next = 8;
              return client._UpdateLineItem({
                cartId: id,
                lines: [{
                  id: merchandiseId,
                  quantity: quantity,
                  attributes: attributes
                }]
              });

            case 8:
              _yield$client$_Update = _context4.sent;
              cartLinesUpdate = _yield$client$_Update.cartLinesUpdate;
              _cart3 = cartLinesUpdate == null ? void 0 : cartLinesUpdate.cart;

              if (_cart3 && !dontMutateState) {
                mutate(_cart3, false);
              }

              if (_cart3) {
                storefrontEvents.emit('updateLineItemSuccess', _cart3);
                storefrontEvents.emit('allSuccesses', {
                  type: 'updateLineItemSuccess',
                  data: _cart3
                });
              }

              cartLinesUpdate == null ? void 0 : cartLinesUpdate.userErrors.forEach(function (error) {
                var err = new Error(error.code + ": " + error.message);
                storefrontEvents.emit('updateLineItemError', err);
                storefrontEvents.emit('allErrors', {
                  type: 'updateLineItemError',
                  error: err
                });
              });
              _context4.next = 21;
              break;

            case 16:
              _context4.prev = 16;
              _context4.t0 = _context4["catch"](2);
              formattedError = formatError(_context4.t0);
              storefrontEvents.emit('updateLineItemError', formattedError);
              storefrontEvents.emit('allErrors', {
                type: 'updateLineItemError',
                error: formattedError
              });

            case 21:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, null, [[2, 16]]);
    }));

    return function (_x4, _x5) {
      return _ref6.apply(this, arguments);
    };
  }(), [cartLocalStorage, client, mutate]);
  var onRemoveLineItem = useCallback( /*#__PURE__*/function () {
    var _ref8 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(_ref7, dontMutateState) {
      var merchandiseId, id, _yield$client$_Remove, cartLinesRemove, _cart4, formattedError;

      return runtime_1.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              merchandiseId = _ref7.merchandiseId;

              if (dontMutateState === void 0) {
                dontMutateState = false;
              }

              _context5.prev = 2;
              id = cartLocalStorage.get();

              if (id) {
                _context5.next = 6;
                break;
              }

              return _context5.abrupt("return");

            case 6:
              _context5.next = 8;
              return client._RemoveLineItem({
                cartId: id,
                lineIds: [merchandiseId]
              });

            case 8:
              _yield$client$_Remove = _context5.sent;
              cartLinesRemove = _yield$client$_Remove.cartLinesRemove;
              _cart4 = cartLinesRemove == null ? void 0 : cartLinesRemove.cart;

              if (_cart4 && !dontMutateState) {
                mutate(_cart4, false);
              }

              if (_cart4) {
                storefrontEvents.emit('removeLineItemSuccess', _cart4);
                storefrontEvents.emit('allSuccesses', {
                  type: 'removeLineItemSuccess',
                  data: _cart4
                });
              }

              cartLinesRemove == null ? void 0 : cartLinesRemove.userErrors.forEach(function (error) {
                var err = new Error(error.code + ": " + error.message);
                storefrontEvents.emit('removeLineItemError', err);
                storefrontEvents.emit('allErrors', {
                  type: 'removeLineItemError',
                  error: err
                });
              });
              _context5.next = 21;
              break;

            case 16:
              _context5.prev = 16;
              _context5.t0 = _context5["catch"](2);
              formattedError = formatError(_context5.t0);
              storefrontEvents.emit('removeLineItemError', formattedError);
              storefrontEvents.emit('allErrors', {
                type: 'removeLineItemError',
                error: formattedError
              });

            case 21:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, null, [[2, 16]]);
    }));

    return function (_x6, _x7) {
      return _ref8.apply(this, arguments);
    };
  }(), [cartLocalStorage, client, mutate]);
  var cartItemsCount = useMemo(function () {
    var _cart$lines, _cart$lines2;

    if (cart === null) return 0;
    if (!(cart != null && (_cart$lines = cart.lines) != null && _cart$lines.edges)) return undefined;
    var result = 0;
    cart == null ? void 0 : (_cart$lines2 = cart.lines) == null ? void 0 : _cart$lines2.edges.forEach(function (i) {
      result += i.node.quantity;
    });
    return result;
  }, [cart]);
  return React__default.createElement(Context.Provider, {
    value: {
      cart: cart,
      getOrCreateCart: getOrCreateCart,
      cartToggleState: cartToggleState,
      cartItemsCount: cartItemsCount,
      onAddLineItem: onAddLineItem,
      onUpdateLineItem: onUpdateLineItem,
      onRemoveLineItem: onRemoveLineItem,
      mutateCart: mutate
    }
  }, children);
};

var StorefrontProvider = function StorefrontProvider(_ref9) {
  var children = _ref9.children,
      client = _ref9.client,
      appCartId = _ref9.appCartId;
  return React__default.createElement(InternalContextProvider, {
    client: client,
    appCartId: appCartId
  }, children);
};
var useStorefront = function useStorefront() {
  var ctx = useContext(Context);

  if (ctx === undefined) {
    throw new Error('useStorefront must be used below <StorefrontProvider />');
  }

  return ctx;
};

var useProductHelper = function useProductHelper(product) {
  var _useStorefront = useStorefront(),
      onAddLineItem = _useStorefront.onAddLineItem,
      cartToggleState = _useStorefront.cartToggleState;

  var _useState = useState(function () {
    var opts = {};
    product.options.forEach(function (o) {
      if (o.name.toLowerCase() !== 'title') opts[o.name] = undefined;
    });
    return opts;
  }),
      selectedOptions = _useState[0],
      setSelectedOptions = _useState[1];

  var handleSelectOption = useCallback(function (name, value) {
    return setSelectedOptions(function (p) {
      var _extends2;

      return _extends({}, p, (_extends2 = {}, _extends2[name] = value, _extends2));
    });
  }, []);
  var selectedVariant = useMemo(function () {
    if (product.variants.edges.length === 1) return product.variants.edges[0];

    var _selectedOptions = Object.entries(selectedOptions);

    var selectedVariant = product.variants.edges.find(function (variant) {
      return _selectedOptions.every(function (_ref) {
        var name = _ref[0],
            value = _ref[1];
        return variant.node.selectedOptions.find(function (option) {
          return option.name === name && option.value === value;
        });
      });
    });
    return selectedVariant;
  }, [selectedOptions, product.variants]);
  var optionsToSelect = useMemo(function () {
    return product.options.filter(function (o) {
      return o.name.toLowerCase() !== 'title';
    }).map(function (option) {
      return _extends({}, option, {
        values: option.values.map(function (value) {
          var variants = product.variants.edges.filter(function (variant) {
            return variant.node.selectedOptions.every(function (optionInVariant) {
              if (optionInVariant.name === option.name) {
                return optionInVariant.value === value;
              } else if (selectedOptions[optionInVariant.name]) {
                return optionInVariant.value === selectedOptions[optionInVariant.name];
              } else {
                return true;
              }
            });
          });
          var isNotAvailable = variants.every(function (v) {
            return v ? !v.node.availableForSale : true;
          });
          return {
            value: value,
            disabled: isNotAvailable
          };
        })
      });
    });
  }, [product.options, product.variants.edges, selectedOptions]);
  var handleAddToCart = useCallback( /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(options) {
      var _options$quantity;

      return runtime_1.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (selectedVariant) {
                _context.next = 3;
                break;
              }

              options == null ? void 0 : options.onError == null ? void 0 : options.onError(new Error('No variant selected'));
              return _context.abrupt("return");

            case 3:
              _context.prev = 3;
              _context.next = 6;
              return onAddLineItem({
                merchandiseId: selectedVariant.node.id,
                quantity: (_options$quantity = options == null ? void 0 : options.quantity) != null ? _options$quantity : 1
              });

            case 6:
              if (options != null && options.openCartOnSuccess) {
                cartToggleState.handleOn();
              }

              options == null ? void 0 : options.onSuccess == null ? void 0 : options.onSuccess();
              _context.next = 13;
              break;

            case 10:
              _context.prev = 10;
              _context.t0 = _context["catch"](3);
              options == null ? void 0 : options.onError == null ? void 0 : options.onError(_context.t0);

            case 13:
              _context.prev = 13;
              options == null ? void 0 : options.onSettle == null ? void 0 : options.onSettle();
              return _context.finish(13);

            case 16:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[3, 10, 13, 16]]);
    }));

    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }(), [cartToggleState, onAddLineItem, selectedVariant]);

  var _useMemo = useMemo(function () {
    var selectedOptionsKeys = Object.keys(selectedOptions);
    return {
      hasOneOptionSelected: selectedOptionsKeys.some(function (o) {
        return !!selectedOptions[o];
      }),
      hasAllOptionsSelected: selectedOptionsKeys.every(function (o) {
        return !!selectedOptions[o];
      }),
      hasNoOptions: selectedOptionsKeys.length === 0
    };
  }, [selectedOptions]),
      hasOneOptionSelected = _useMemo.hasOneOptionSelected,
      hasAllOptionsSelected = _useMemo.hasAllOptionsSelected,
      hasNoOptions = _useMemo.hasNoOptions;

  var discount = useMemo(function () {
    if (!selectedVariant || !selectedVariant.node.compareAtPriceV2) return null;
    var raw = selectedVariant.node.priceV2.amount - selectedVariant.node.compareAtPriceV2.amount;
    var percentage = raw / selectedVariant.node.compareAtPriceV2.amount * 100;
    return {
      percentage: percentage,
      raw: raw
    };
  }, [selectedVariant]);
  var isProductSoldOut = useMemo(function () {
    return !product.availableForSale;
  }, [product.availableForSale]);
  var isSelectedVariantSoldOut = useMemo(function () {
    return selectedVariant == null ? void 0 : selectedVariant.node.availableForSale;
  }, [selectedVariant]);
  return {
    handleSelectOption: handleSelectOption,
    handleAddToCart: handleAddToCart,
    optionsToSelect: optionsToSelect,
    selectedVariant: selectedVariant,
    discount: discount,
    isProductSoldOut: isProductSoldOut,
    isSelectedVariantSoldOut: isSelectedVariantSoldOut,
    selectedOptions: selectedOptions,
    hasOneOptionSelected: hasOneOptionSelected,
    hasAllOptionsSelected: hasAllOptionsSelected,
    hasNoOptions: hasNoOptions
  };
};

function zeroPad(number, length) {
  if (number >= Math.pow(10, length)) {
    return number.toString();
  }

  return (Array(length).join('0') + number).slice(-length);
}
function getTimeDelta(timeRemaining) {
  var seconds = Math.abs(timeRemaining) / 1000;
  return {
    days: Math.floor(seconds / (3600 * 24)),
    hours: Math.floor(seconds / 3600 % 24),
    minutes: Math.floor(seconds / 60 % 60),
    seconds: Math.floor(seconds % 60),
    milliseconds: Number((seconds % 1 * 1000).toFixed())
  };
}
function getFormattedTimeDelta(timeRemaining, options) {
  var _options$zeroPadLengt;

  var _getTimeDelta = getTimeDelta(timeRemaining),
      days = _getTimeDelta.days,
      hours = _getTimeDelta.hours,
      minutes = _getTimeDelta.minutes,
      seconds = _getTimeDelta.seconds;

  var zeroPadLength = (_options$zeroPadLengt = options == null ? void 0 : options.zeroPadLength) != null ? _options$zeroPadLengt : 2;
  var formattedHours = options != null && options.daysInHours ? zeroPad(hours + days * 24, zeroPadLength) : zeroPad(hours, zeroPadLength);
  return {
    days: options != null && options.daysInHours ? '' : zeroPad(days, zeroPadLength),
    hours: formattedHours,
    minutes: zeroPad(minutes, zeroPadLength),
    seconds: zeroPad(seconds, zeroPadLength),
    isComplete: timeRemaining < 1000 // this is the "human" isComplete. At this point we might have some milliseconds left, but the countdown will say "0".

  };
}
function dateOrTimestampToTimestamp(dateOrTimestamp) {
  return typeof dateOrTimestamp === 'number' ? dateOrTimestamp : dateOrTimestamp.getTime();
}

function calculateCountdownState(endDate, startDate) {
  var now = Date.now();
  var endTimestamp = dateOrTimestampToTimestamp(endDate);
  var startTimestamp = startDate ? dateOrTimestampToTimestamp(startDate) : null;
  var timeRemaining = Math.max(0, endTimestamp - now);
  var progress = startTimestamp ? parseFloat(Math.max(0, Math.min((now - startTimestamp) / (endTimestamp - startTimestamp), 1)).toFixed(2)) : null;
  var isComplete = timeRemaining <= 0;
  var humanTimeRemaining = getFormattedTimeDelta(timeRemaining);
  return {
    timeRemaining: timeRemaining,
    isComplete: isComplete,
    progress: progress,
    humanTimeRemaining: humanTimeRemaining
  };
}

var _createContext = /*#__PURE__*/createContext$1(),
    Provider = _createContext.Provider,
    useDrop = _createContext.useStore;

var DropProvider = function DropProvider(_ref) {
  var children = _ref.children,
      endDate = _ref.endDate,
      startDate = _ref.startDate,
      exitDelay = _ref.exitDelay,
      countdownChildren = _ref.countdownChildren;

  var _React$useMemo = useMemo(function () {
    var endTimestamp = dateOrTimestampToTimestamp(endDate);
    var startTimestamp = startDate ? dateOrTimestampToTimestamp(startDate) : null;

    if (startTimestamp && startTimestamp >= endTimestamp) {
      throw new Error('startDate must be before endDate. Please check your start and end dates.');
    }

    return {
      endTimestamp: endTimestamp,
      startTimestamp: startTimestamp
    };
  }, [endDate, startDate]),
      endTimestamp = _React$useMemo.endTimestamp,
      startTimestamp = _React$useMemo.startTimestamp;

  return createElement(Provider, {
    createStore: function createStore() {
      return create(function (set) {
        var state = calculateCountdownState(endTimestamp, startTimestamp);
        return _extends({}, state, {
          endTimestamp: endTimestamp,
          startTimestamp: startTimestamp,
          countdownState: state.humanTimeRemaining.isComplete ? 'complete' : 'running',
          update: function update() {
            set(calculateCountdownState(endTimestamp, startTimestamp));
          },
          setCountdownState: function setCountdownState(countdownState) {
            set({
              countdownState: countdownState
            });
          }
        });
      });
    }
  }, createElement(Renderer, {
    exitDelay: exitDelay,
    countdownChildren: countdownChildren
  }, children));
};

function Renderer(_ref2) {
  var countdownChildren = _ref2.countdownChildren,
      _ref2$exitDelay = _ref2.exitDelay,
      exitDelay = _ref2$exitDelay === void 0 ? 0 : _ref2$exitDelay,
      children = _ref2.children;

  var _useDrop = useDrop(useCallback(function (state) {
    return {
      isComplete: state.isComplete,
      humanIsComplete: state.humanTimeRemaining.isComplete,
      countdownState: state.countdownState,
      endTimestamp: state.endTimestamp,
      startTimestamp: state.startTimestamp,
      setCountdownState: state.setCountdownState,
      update: state.update
    };
  }, []), shallow),
      isComplete = _useDrop.isComplete,
      humanIsComplete = _useDrop.humanIsComplete,
      countdownState = _useDrop.countdownState,
      endTimestamp = _useDrop.endTimestamp,
      startTimestamp = _useDrop.startTimestamp,
      update = _useDrop.update,
      setCountdownState = _useDrop.setCountdownState;

  useEffect(function () {
    if (isComplete) return;
    var interval = window.setInterval(update, 1000);
    return function () {
      window.clearInterval(interval);
    };
  }, [endTimestamp, startTimestamp, isComplete, update]);
  useEffect(function () {
    switch (countdownState) {
      case 'running':
        if (humanIsComplete) {
          setCountdownState(exitDelay > 0 ? 'exiting' : 'complete');
        }

        break;

      case 'exiting':
        {
          var timeout = window.setTimeout(function () {
            setCountdownState('complete');
          }, exitDelay != null ? exitDelay : 0);
          return function () {
            window.clearTimeout(timeout);
          };
        }
    }

    return;
  }, [countdownState, exitDelay, humanIsComplete, setCountdownState]);
  return createElement(Fragment, null, (!countdownChildren || isComplete) && createElement(Memo, null, children), countdownChildren && countdownState !== 'complete' && createElement(Memo, null, countdownChildren));
}

var Memo = /*#__PURE__*/memo(function (_ref3) {
  var children = _ref3.children;
  return createElement(Fragment, null, children);
});

var makeAdminApiOrigin = function makeAdminApiOrigin(_ref) {
  var apiKey = _ref.apiKey,
      adminPassword = _ref.adminPassword,
      domain = _ref.domain;
  return "https://" + apiKey + ":" + adminPassword + "@" + domain;
};

var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15;
/** The set of valid sort keys for the Article query. */

var ArticleSortKeys;

(function (ArticleSortKeys) {
  /** Sort by the `author` value. */
  ArticleSortKeys["Author"] = "AUTHOR";
  /** Sort by the `blog_title` value. */

  ArticleSortKeys["BlogTitle"] = "BLOG_TITLE";
  /** Sort by the `id` value. */

  ArticleSortKeys["Id"] = "ID";
  /** Sort by the `published_at` value. */

  ArticleSortKeys["PublishedAt"] = "PUBLISHED_AT";
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   *
   */

  ArticleSortKeys["Relevance"] = "RELEVANCE";
  /** Sort by the `title` value. */

  ArticleSortKeys["Title"] = "TITLE";
  /** Sort by the `updated_at` value. */

  ArticleSortKeys["UpdatedAt"] = "UPDATED_AT";
})(ArticleSortKeys || (ArticleSortKeys = {}));
/** The set of valid sort keys for the Blog query. */


var BlogSortKeys;

(function (BlogSortKeys) {
  /** Sort by the `handle` value. */
  BlogSortKeys["Handle"] = "HANDLE";
  /** Sort by the `id` value. */

  BlogSortKeys["Id"] = "ID";
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   *
   */

  BlogSortKeys["Relevance"] = "RELEVANCE";
  /** Sort by the `title` value. */

  BlogSortKeys["Title"] = "TITLE";
})(BlogSortKeys || (BlogSortKeys = {}));
/** Card brand, such as Visa or Mastercard, which can be used for payments. */


var CardBrand;

(function (CardBrand) {
  /** American Express. */
  CardBrand["AmericanExpress"] = "AMERICAN_EXPRESS";
  /** Diners Club. */

  CardBrand["DinersClub"] = "DINERS_CLUB";
  /** Discover. */

  CardBrand["Discover"] = "DISCOVER";
  /** JCB. */

  CardBrand["Jcb"] = "JCB";
  /** Mastercard. */

  CardBrand["Mastercard"] = "MASTERCARD";
  /** Visa. */

  CardBrand["Visa"] = "VISA";
})(CardBrand || (CardBrand = {}));
/** Possible error codes that can be returned by `CartUserError`. */


var CartErrorCode;

(function (CartErrorCode) {
  /** The input value is invalid. */
  CartErrorCode["Invalid"] = "INVALID";
  /** Merchandise line was not found in cart. */

  CartErrorCode["InvalidMerchandiseLine"] = "INVALID_MERCHANDISE_LINE";
  /** The input value should be less than the maximum value allowed. */

  CartErrorCode["LessThan"] = "LESS_THAN";
  /** Missing discount code. */

  CartErrorCode["MissingDiscountCode"] = "MISSING_DISCOUNT_CODE";
  /** Missing note. */

  CartErrorCode["MissingNote"] = "MISSING_NOTE";
})(CartErrorCode || (CartErrorCode = {}));
/** Possible error codes that can be returned by `CheckoutUserError`. */


var CheckoutErrorCode;

(function (CheckoutErrorCode) {
  /** Checkout is already completed. */
  CheckoutErrorCode["AlreadyCompleted"] = "ALREADY_COMPLETED";
  /** Input email contains an invalid domain name. */

  CheckoutErrorCode["BadDomain"] = "BAD_DOMAIN";
  /** The input value is blank. */

  CheckoutErrorCode["Blank"] = "BLANK";
  /** Cart does not meet discount requirements notice. */

  CheckoutErrorCode["CartDoesNotMeetDiscountRequirementsNotice"] = "CART_DOES_NOT_MEET_DISCOUNT_REQUIREMENTS_NOTICE";
  /** Customer already used once per customer discount notice. */

  CheckoutErrorCode["CustomerAlreadyUsedOncePerCustomerDiscountNotice"] = "CUSTOMER_ALREADY_USED_ONCE_PER_CUSTOMER_DISCOUNT_NOTICE";
  /** Discount already applied. */

  CheckoutErrorCode["DiscountAlreadyApplied"] = "DISCOUNT_ALREADY_APPLIED";
  /** Discount disabled. */

  CheckoutErrorCode["DiscountDisabled"] = "DISCOUNT_DISABLED";
  /** Discount expired. */

  CheckoutErrorCode["DiscountExpired"] = "DISCOUNT_EXPIRED";
  /** Discount limit reached. */

  CheckoutErrorCode["DiscountLimitReached"] = "DISCOUNT_LIMIT_REACHED";
  /** Discount not found. */

  CheckoutErrorCode["DiscountNotFound"] = "DISCOUNT_NOT_FOUND";
  /** Checkout is already completed. */

  CheckoutErrorCode["Empty"] = "EMPTY";
  /** Queue token has expired. */

  CheckoutErrorCode["ExpiredQueueToken"] = "EXPIRED_QUEUE_TOKEN";
  /** Gift card has already been applied. */

  CheckoutErrorCode["GiftCardAlreadyApplied"] = "GIFT_CARD_ALREADY_APPLIED";
  /** Gift card code is invalid. */

  CheckoutErrorCode["GiftCardCodeInvalid"] = "GIFT_CARD_CODE_INVALID";
  /** Gift card currency does not match checkout currency. */

  CheckoutErrorCode["GiftCardCurrencyMismatch"] = "GIFT_CARD_CURRENCY_MISMATCH";
  /** Gift card has no funds left. */

  CheckoutErrorCode["GiftCardDepleted"] = "GIFT_CARD_DEPLETED";
  /** Gift card is disabled. */

  CheckoutErrorCode["GiftCardDisabled"] = "GIFT_CARD_DISABLED";
  /** Gift card is expired. */

  CheckoutErrorCode["GiftCardExpired"] = "GIFT_CARD_EXPIRED";
  /** Gift card was not found. */

  CheckoutErrorCode["GiftCardNotFound"] = "GIFT_CARD_NOT_FOUND";
  /** Gift card cannot be applied to a checkout that contains a gift card. */

  CheckoutErrorCode["GiftCardUnusable"] = "GIFT_CARD_UNUSABLE";
  /** The input value should be greater than or equal to the minimum value allowed. */

  CheckoutErrorCode["GreaterThanOrEqualTo"] = "GREATER_THAN_OR_EQUAL_TO";
  /** Higher value discount applied. */

  CheckoutErrorCode["HigherValueDiscountApplied"] = "HIGHER_VALUE_DISCOUNT_APPLIED";
  /** The input value is invalid. */

  CheckoutErrorCode["Invalid"] = "INVALID";
  /** Cannot specify country and presentment currency code. */

  CheckoutErrorCode["InvalidCountryAndCurrency"] = "INVALID_COUNTRY_AND_CURRENCY";
  /** Input Zip is invalid for country provided. */

  CheckoutErrorCode["InvalidForCountry"] = "INVALID_FOR_COUNTRY";
  /** Input Zip is invalid for country and province provided. */

  CheckoutErrorCode["InvalidForCountryAndProvince"] = "INVALID_FOR_COUNTRY_AND_PROVINCE";
  /** Invalid province in country. */

  CheckoutErrorCode["InvalidProvinceInCountry"] = "INVALID_PROVINCE_IN_COUNTRY";
  /** Queue token is invalid. */

  CheckoutErrorCode["InvalidQueueToken"] = "INVALID_QUEUE_TOKEN";
  /** Invalid region in country. */

  CheckoutErrorCode["InvalidRegionInCountry"] = "INVALID_REGION_IN_COUNTRY";
  /** Invalid state in country. */

  CheckoutErrorCode["InvalidStateInCountry"] = "INVALID_STATE_IN_COUNTRY";
  /** The input value should be less than the maximum value allowed. */

  CheckoutErrorCode["LessThan"] = "LESS_THAN";
  /** The input value should be less than or equal to the maximum value allowed. */

  CheckoutErrorCode["LessThanOrEqualTo"] = "LESS_THAN_OR_EQUAL_TO";
  /** Line item was not found in checkout. */

  CheckoutErrorCode["LineItemNotFound"] = "LINE_ITEM_NOT_FOUND";
  /** Checkout is locked. */

  CheckoutErrorCode["Locked"] = "LOCKED";
  /** Missing payment input. */

  CheckoutErrorCode["MissingPaymentInput"] = "MISSING_PAYMENT_INPUT";
  /** Not enough in stock. */

  CheckoutErrorCode["NotEnoughInStock"] = "NOT_ENOUGH_IN_STOCK";
  /** Input value is not supported. */

  CheckoutErrorCode["NotSupported"] = "NOT_SUPPORTED";
  /** The input value needs to be blank. */

  CheckoutErrorCode["Present"] = "PRESENT";
  /** Shipping rate expired. */

  CheckoutErrorCode["ShippingRateExpired"] = "SHIPPING_RATE_EXPIRED";
  /** Throttled during checkout. */

  CheckoutErrorCode["ThrottledDuringCheckout"] = "THROTTLED_DURING_CHECKOUT";
  /** The input value is too long. */

  CheckoutErrorCode["TooLong"] = "TOO_LONG";
  /** The amount of the payment does not match the value to be paid. */

  CheckoutErrorCode["TotalPriceMismatch"] = "TOTAL_PRICE_MISMATCH";
  /** Unable to apply discount. */

  CheckoutErrorCode["UnableToApply"] = "UNABLE_TO_APPLY";
})(CheckoutErrorCode || (CheckoutErrorCode = {}));
/** The set of valid sort keys for the Collection query. */


var CollectionSortKeys;

(function (CollectionSortKeys) {
  /** Sort by the `id` value. */
  CollectionSortKeys["Id"] = "ID";
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   *
   */

  CollectionSortKeys["Relevance"] = "RELEVANCE";
  /** Sort by the `title` value. */

  CollectionSortKeys["Title"] = "TITLE";
  /** Sort by the `updated_at` value. */

  CollectionSortKeys["UpdatedAt"] = "UPDATED_AT";
})(CollectionSortKeys || (CollectionSortKeys = {}));
/**
 * The code designating a country/region, which generally follows ISO 3166-1 alpha-2 guidelines.
 * If a territory doesn't have a country code value in the `CountryCode` enum, then it might be considered a subdivision
 * of another country. For example, the territories associated with Spain are represented by the country code `ES`,
 * and the territories associated with the United States of America are represented by the country code `US`.
 *
 */


var CountryCode;

(function (CountryCode) {
  /** Ascension Island. */
  CountryCode["Ac"] = "AC";
  /** Andorra. */

  CountryCode["Ad"] = "AD";
  /** United Arab Emirates. */

  CountryCode["Ae"] = "AE";
  /** Afghanistan. */

  CountryCode["Af"] = "AF";
  /** Antigua & Barbuda. */

  CountryCode["Ag"] = "AG";
  /** Anguilla. */

  CountryCode["Ai"] = "AI";
  /** Albania. */

  CountryCode["Al"] = "AL";
  /** Armenia. */

  CountryCode["Am"] = "AM";
  /** Netherlands Antilles. */

  CountryCode["An"] = "AN";
  /** Angola. */

  CountryCode["Ao"] = "AO";
  /** Argentina. */

  CountryCode["Ar"] = "AR";
  /** Austria. */

  CountryCode["At"] = "AT";
  /** Australia. */

  CountryCode["Au"] = "AU";
  /** Aruba. */

  CountryCode["Aw"] = "AW";
  /** Åland Islands. */

  CountryCode["Ax"] = "AX";
  /** Azerbaijan. */

  CountryCode["Az"] = "AZ";
  /** Bosnia & Herzegovina. */

  CountryCode["Ba"] = "BA";
  /** Barbados. */

  CountryCode["Bb"] = "BB";
  /** Bangladesh. */

  CountryCode["Bd"] = "BD";
  /** Belgium. */

  CountryCode["Be"] = "BE";
  /** Burkina Faso. */

  CountryCode["Bf"] = "BF";
  /** Bulgaria. */

  CountryCode["Bg"] = "BG";
  /** Bahrain. */

  CountryCode["Bh"] = "BH";
  /** Burundi. */

  CountryCode["Bi"] = "BI";
  /** Benin. */

  CountryCode["Bj"] = "BJ";
  /** St. Barthélemy. */

  CountryCode["Bl"] = "BL";
  /** Bermuda. */

  CountryCode["Bm"] = "BM";
  /** Brunei. */

  CountryCode["Bn"] = "BN";
  /** Bolivia. */

  CountryCode["Bo"] = "BO";
  /** Caribbean Netherlands. */

  CountryCode["Bq"] = "BQ";
  /** Brazil. */

  CountryCode["Br"] = "BR";
  /** Bahamas. */

  CountryCode["Bs"] = "BS";
  /** Bhutan. */

  CountryCode["Bt"] = "BT";
  /** Bouvet Island. */

  CountryCode["Bv"] = "BV";
  /** Botswana. */

  CountryCode["Bw"] = "BW";
  /** Belarus. */

  CountryCode["By"] = "BY";
  /** Belize. */

  CountryCode["Bz"] = "BZ";
  /** Canada. */

  CountryCode["Ca"] = "CA";
  /** Cocos (Keeling) Islands. */

  CountryCode["Cc"] = "CC";
  /** Congo - Kinshasa. */

  CountryCode["Cd"] = "CD";
  /** Central African Republic. */

  CountryCode["Cf"] = "CF";
  /** Congo - Brazzaville. */

  CountryCode["Cg"] = "CG";
  /** Switzerland. */

  CountryCode["Ch"] = "CH";
  /** Côte d’Ivoire. */

  CountryCode["Ci"] = "CI";
  /** Cook Islands. */

  CountryCode["Ck"] = "CK";
  /** Chile. */

  CountryCode["Cl"] = "CL";
  /** Cameroon. */

  CountryCode["Cm"] = "CM";
  /** China. */

  CountryCode["Cn"] = "CN";
  /** Colombia. */

  CountryCode["Co"] = "CO";
  /** Costa Rica. */

  CountryCode["Cr"] = "CR";
  /** Cuba. */

  CountryCode["Cu"] = "CU";
  /** Cape Verde. */

  CountryCode["Cv"] = "CV";
  /** Curaçao. */

  CountryCode["Cw"] = "CW";
  /** Christmas Island. */

  CountryCode["Cx"] = "CX";
  /** Cyprus. */

  CountryCode["Cy"] = "CY";
  /** Czechia. */

  CountryCode["Cz"] = "CZ";
  /** Germany. */

  CountryCode["De"] = "DE";
  /** Djibouti. */

  CountryCode["Dj"] = "DJ";
  /** Denmark. */

  CountryCode["Dk"] = "DK";
  /** Dominica. */

  CountryCode["Dm"] = "DM";
  /** Dominican Republic. */

  CountryCode["Do"] = "DO";
  /** Algeria. */

  CountryCode["Dz"] = "DZ";
  /** Ecuador. */

  CountryCode["Ec"] = "EC";
  /** Estonia. */

  CountryCode["Ee"] = "EE";
  /** Egypt. */

  CountryCode["Eg"] = "EG";
  /** Western Sahara. */

  CountryCode["Eh"] = "EH";
  /** Eritrea. */

  CountryCode["Er"] = "ER";
  /** Spain. */

  CountryCode["Es"] = "ES";
  /** Ethiopia. */

  CountryCode["Et"] = "ET";
  /** Finland. */

  CountryCode["Fi"] = "FI";
  /** Fiji. */

  CountryCode["Fj"] = "FJ";
  /** Falkland Islands. */

  CountryCode["Fk"] = "FK";
  /** Faroe Islands. */

  CountryCode["Fo"] = "FO";
  /** France. */

  CountryCode["Fr"] = "FR";
  /** Gabon. */

  CountryCode["Ga"] = "GA";
  /** United Kingdom. */

  CountryCode["Gb"] = "GB";
  /** Grenada. */

  CountryCode["Gd"] = "GD";
  /** Georgia. */

  CountryCode["Ge"] = "GE";
  /** French Guiana. */

  CountryCode["Gf"] = "GF";
  /** Guernsey. */

  CountryCode["Gg"] = "GG";
  /** Ghana. */

  CountryCode["Gh"] = "GH";
  /** Gibraltar. */

  CountryCode["Gi"] = "GI";
  /** Greenland. */

  CountryCode["Gl"] = "GL";
  /** Gambia. */

  CountryCode["Gm"] = "GM";
  /** Guinea. */

  CountryCode["Gn"] = "GN";
  /** Guadeloupe. */

  CountryCode["Gp"] = "GP";
  /** Equatorial Guinea. */

  CountryCode["Gq"] = "GQ";
  /** Greece. */

  CountryCode["Gr"] = "GR";
  /** South Georgia & South Sandwich Islands. */

  CountryCode["Gs"] = "GS";
  /** Guatemala. */

  CountryCode["Gt"] = "GT";
  /** Guinea-Bissau. */

  CountryCode["Gw"] = "GW";
  /** Guyana. */

  CountryCode["Gy"] = "GY";
  /** Hong Kong SAR. */

  CountryCode["Hk"] = "HK";
  /** Heard & McDonald Islands. */

  CountryCode["Hm"] = "HM";
  /** Honduras. */

  CountryCode["Hn"] = "HN";
  /** Croatia. */

  CountryCode["Hr"] = "HR";
  /** Haiti. */

  CountryCode["Ht"] = "HT";
  /** Hungary. */

  CountryCode["Hu"] = "HU";
  /** Indonesia. */

  CountryCode["Id"] = "ID";
  /** Ireland. */

  CountryCode["Ie"] = "IE";
  /** Israel. */

  CountryCode["Il"] = "IL";
  /** Isle of Man. */

  CountryCode["Im"] = "IM";
  /** India. */

  CountryCode["In"] = "IN";
  /** British Indian Ocean Territory. */

  CountryCode["Io"] = "IO";
  /** Iraq. */

  CountryCode["Iq"] = "IQ";
  /** Iran. */

  CountryCode["Ir"] = "IR";
  /** Iceland. */

  CountryCode["Is"] = "IS";
  /** Italy. */

  CountryCode["It"] = "IT";
  /** Jersey. */

  CountryCode["Je"] = "JE";
  /** Jamaica. */

  CountryCode["Jm"] = "JM";
  /** Jordan. */

  CountryCode["Jo"] = "JO";
  /** Japan. */

  CountryCode["Jp"] = "JP";
  /** Kenya. */

  CountryCode["Ke"] = "KE";
  /** Kyrgyzstan. */

  CountryCode["Kg"] = "KG";
  /** Cambodia. */

  CountryCode["Kh"] = "KH";
  /** Kiribati. */

  CountryCode["Ki"] = "KI";
  /** Comoros. */

  CountryCode["Km"] = "KM";
  /** St. Kitts & Nevis. */

  CountryCode["Kn"] = "KN";
  /** North Korea. */

  CountryCode["Kp"] = "KP";
  /** South Korea. */

  CountryCode["Kr"] = "KR";
  /** Kuwait. */

  CountryCode["Kw"] = "KW";
  /** Cayman Islands. */

  CountryCode["Ky"] = "KY";
  /** Kazakhstan. */

  CountryCode["Kz"] = "KZ";
  /** Laos. */

  CountryCode["La"] = "LA";
  /** Lebanon. */

  CountryCode["Lb"] = "LB";
  /** St. Lucia. */

  CountryCode["Lc"] = "LC";
  /** Liechtenstein. */

  CountryCode["Li"] = "LI";
  /** Sri Lanka. */

  CountryCode["Lk"] = "LK";
  /** Liberia. */

  CountryCode["Lr"] = "LR";
  /** Lesotho. */

  CountryCode["Ls"] = "LS";
  /** Lithuania. */

  CountryCode["Lt"] = "LT";
  /** Luxembourg. */

  CountryCode["Lu"] = "LU";
  /** Latvia. */

  CountryCode["Lv"] = "LV";
  /** Libya. */

  CountryCode["Ly"] = "LY";
  /** Morocco. */

  CountryCode["Ma"] = "MA";
  /** Monaco. */

  CountryCode["Mc"] = "MC";
  /** Moldova. */

  CountryCode["Md"] = "MD";
  /** Montenegro. */

  CountryCode["Me"] = "ME";
  /** St. Martin. */

  CountryCode["Mf"] = "MF";
  /** Madagascar. */

  CountryCode["Mg"] = "MG";
  /** North Macedonia. */

  CountryCode["Mk"] = "MK";
  /** Mali. */

  CountryCode["Ml"] = "ML";
  /** Myanmar (Burma). */

  CountryCode["Mm"] = "MM";
  /** Mongolia. */

  CountryCode["Mn"] = "MN";
  /** Macao SAR. */

  CountryCode["Mo"] = "MO";
  /** Martinique. */

  CountryCode["Mq"] = "MQ";
  /** Mauritania. */

  CountryCode["Mr"] = "MR";
  /** Montserrat. */

  CountryCode["Ms"] = "MS";
  /** Malta. */

  CountryCode["Mt"] = "MT";
  /** Mauritius. */

  CountryCode["Mu"] = "MU";
  /** Maldives. */

  CountryCode["Mv"] = "MV";
  /** Malawi. */

  CountryCode["Mw"] = "MW";
  /** Mexico. */

  CountryCode["Mx"] = "MX";
  /** Malaysia. */

  CountryCode["My"] = "MY";
  /** Mozambique. */

  CountryCode["Mz"] = "MZ";
  /** Namibia. */

  CountryCode["Na"] = "NA";
  /** New Caledonia. */

  CountryCode["Nc"] = "NC";
  /** Niger. */

  CountryCode["Ne"] = "NE";
  /** Norfolk Island. */

  CountryCode["Nf"] = "NF";
  /** Nigeria. */

  CountryCode["Ng"] = "NG";
  /** Nicaragua. */

  CountryCode["Ni"] = "NI";
  /** Netherlands. */

  CountryCode["Nl"] = "NL";
  /** Norway. */

  CountryCode["No"] = "NO";
  /** Nepal. */

  CountryCode["Np"] = "NP";
  /** Nauru. */

  CountryCode["Nr"] = "NR";
  /** Niue. */

  CountryCode["Nu"] = "NU";
  /** New Zealand. */

  CountryCode["Nz"] = "NZ";
  /** Oman. */

  CountryCode["Om"] = "OM";
  /** Panama. */

  CountryCode["Pa"] = "PA";
  /** Peru. */

  CountryCode["Pe"] = "PE";
  /** French Polynesia. */

  CountryCode["Pf"] = "PF";
  /** Papua New Guinea. */

  CountryCode["Pg"] = "PG";
  /** Philippines. */

  CountryCode["Ph"] = "PH";
  /** Pakistan. */

  CountryCode["Pk"] = "PK";
  /** Poland. */

  CountryCode["Pl"] = "PL";
  /** St. Pierre & Miquelon. */

  CountryCode["Pm"] = "PM";
  /** Pitcairn Islands. */

  CountryCode["Pn"] = "PN";
  /** Palestinian Territories. */

  CountryCode["Ps"] = "PS";
  /** Portugal. */

  CountryCode["Pt"] = "PT";
  /** Paraguay. */

  CountryCode["Py"] = "PY";
  /** Qatar. */

  CountryCode["Qa"] = "QA";
  /** Réunion. */

  CountryCode["Re"] = "RE";
  /** Romania. */

  CountryCode["Ro"] = "RO";
  /** Serbia. */

  CountryCode["Rs"] = "RS";
  /** Russia. */

  CountryCode["Ru"] = "RU";
  /** Rwanda. */

  CountryCode["Rw"] = "RW";
  /** Saudi Arabia. */

  CountryCode["Sa"] = "SA";
  /** Solomon Islands. */

  CountryCode["Sb"] = "SB";
  /** Seychelles. */

  CountryCode["Sc"] = "SC";
  /** Sudan. */

  CountryCode["Sd"] = "SD";
  /** Sweden. */

  CountryCode["Se"] = "SE";
  /** Singapore. */

  CountryCode["Sg"] = "SG";
  /** St. Helena. */

  CountryCode["Sh"] = "SH";
  /** Slovenia. */

  CountryCode["Si"] = "SI";
  /** Svalbard & Jan Mayen. */

  CountryCode["Sj"] = "SJ";
  /** Slovakia. */

  CountryCode["Sk"] = "SK";
  /** Sierra Leone. */

  CountryCode["Sl"] = "SL";
  /** San Marino. */

  CountryCode["Sm"] = "SM";
  /** Senegal. */

  CountryCode["Sn"] = "SN";
  /** Somalia. */

  CountryCode["So"] = "SO";
  /** Suriname. */

  CountryCode["Sr"] = "SR";
  /** South Sudan. */

  CountryCode["Ss"] = "SS";
  /** São Tomé & Príncipe. */

  CountryCode["St"] = "ST";
  /** El Salvador. */

  CountryCode["Sv"] = "SV";
  /** Sint Maarten. */

  CountryCode["Sx"] = "SX";
  /** Syria. */

  CountryCode["Sy"] = "SY";
  /** Eswatini. */

  CountryCode["Sz"] = "SZ";
  /** Tristan da Cunha. */

  CountryCode["Ta"] = "TA";
  /** Turks & Caicos Islands. */

  CountryCode["Tc"] = "TC";
  /** Chad. */

  CountryCode["Td"] = "TD";
  /** French Southern Territories. */

  CountryCode["Tf"] = "TF";
  /** Togo. */

  CountryCode["Tg"] = "TG";
  /** Thailand. */

  CountryCode["Th"] = "TH";
  /** Tajikistan. */

  CountryCode["Tj"] = "TJ";
  /** Tokelau. */

  CountryCode["Tk"] = "TK";
  /** Timor-Leste. */

  CountryCode["Tl"] = "TL";
  /** Turkmenistan. */

  CountryCode["Tm"] = "TM";
  /** Tunisia. */

  CountryCode["Tn"] = "TN";
  /** Tonga. */

  CountryCode["To"] = "TO";
  /** Turkey. */

  CountryCode["Tr"] = "TR";
  /** Trinidad & Tobago. */

  CountryCode["Tt"] = "TT";
  /** Tuvalu. */

  CountryCode["Tv"] = "TV";
  /** Taiwan. */

  CountryCode["Tw"] = "TW";
  /** Tanzania. */

  CountryCode["Tz"] = "TZ";
  /** Ukraine. */

  CountryCode["Ua"] = "UA";
  /** Uganda. */

  CountryCode["Ug"] = "UG";
  /** U.S. Outlying Islands. */

  CountryCode["Um"] = "UM";
  /** United States. */

  CountryCode["Us"] = "US";
  /** Uruguay. */

  CountryCode["Uy"] = "UY";
  /** Uzbekistan. */

  CountryCode["Uz"] = "UZ";
  /** Vatican City. */

  CountryCode["Va"] = "VA";
  /** St. Vincent & Grenadines. */

  CountryCode["Vc"] = "VC";
  /** Venezuela. */

  CountryCode["Ve"] = "VE";
  /** British Virgin Islands. */

  CountryCode["Vg"] = "VG";
  /** Vietnam. */

  CountryCode["Vn"] = "VN";
  /** Vanuatu. */

  CountryCode["Vu"] = "VU";
  /** Wallis & Futuna. */

  CountryCode["Wf"] = "WF";
  /** Samoa. */

  CountryCode["Ws"] = "WS";
  /** Kosovo. */

  CountryCode["Xk"] = "XK";
  /** Yemen. */

  CountryCode["Ye"] = "YE";
  /** Mayotte. */

  CountryCode["Yt"] = "YT";
  /** South Africa. */

  CountryCode["Za"] = "ZA";
  /** Zambia. */

  CountryCode["Zm"] = "ZM";
  /** Zimbabwe. */

  CountryCode["Zw"] = "ZW";
  /** Unknown Region. */

  CountryCode["Zz"] = "ZZ";
})(CountryCode || (CountryCode = {}));
/** The part of the image that should remain after cropping. */


var CropRegion;

(function (CropRegion) {
  /** Keep the bottom of the image. */
  CropRegion["Bottom"] = "BOTTOM";
  /** Keep the center of the image. */

  CropRegion["Center"] = "CENTER";
  /** Keep the left of the image. */

  CropRegion["Left"] = "LEFT";
  /** Keep the right of the image. */

  CropRegion["Right"] = "RIGHT";
  /** Keep the top of the image. */

  CropRegion["Top"] = "TOP";
})(CropRegion || (CropRegion = {}));
/**
 * The three-letter currency codes that represent the world currencies used in stores. These include standard ISO 4217 codes, legacy codes,
 * and non-standard codes.
 *
 */


var CurrencyCode;

(function (CurrencyCode) {
  /** United Arab Emirates Dirham (AED). */
  CurrencyCode["Aed"] = "AED";
  /** Afghan Afghani (AFN). */

  CurrencyCode["Afn"] = "AFN";
  /** Albanian Lek (ALL). */

  CurrencyCode["All"] = "ALL";
  /** Armenian Dram (AMD). */

  CurrencyCode["Amd"] = "AMD";
  /** Netherlands Antillean Guilder. */

  CurrencyCode["Ang"] = "ANG";
  /** Angolan Kwanza (AOA). */

  CurrencyCode["Aoa"] = "AOA";
  /** Argentine Pesos (ARS). */

  CurrencyCode["Ars"] = "ARS";
  /** Australian Dollars (AUD). */

  CurrencyCode["Aud"] = "AUD";
  /** Aruban Florin (AWG). */

  CurrencyCode["Awg"] = "AWG";
  /** Azerbaijani Manat (AZN). */

  CurrencyCode["Azn"] = "AZN";
  /** Bosnia and Herzegovina Convertible Mark (BAM). */

  CurrencyCode["Bam"] = "BAM";
  /** Barbadian Dollar (BBD). */

  CurrencyCode["Bbd"] = "BBD";
  /** Bangladesh Taka (BDT). */

  CurrencyCode["Bdt"] = "BDT";
  /** Bulgarian Lev (BGN). */

  CurrencyCode["Bgn"] = "BGN";
  /** Bahraini Dinar (BHD). */

  CurrencyCode["Bhd"] = "BHD";
  /** Burundian Franc (BIF). */

  CurrencyCode["Bif"] = "BIF";
  /** Bermudian Dollar (BMD). */

  CurrencyCode["Bmd"] = "BMD";
  /** Brunei Dollar (BND). */

  CurrencyCode["Bnd"] = "BND";
  /** Bolivian Boliviano (BOB). */

  CurrencyCode["Bob"] = "BOB";
  /** Brazilian Real (BRL). */

  CurrencyCode["Brl"] = "BRL";
  /** Bahamian Dollar (BSD). */

  CurrencyCode["Bsd"] = "BSD";
  /** Bhutanese Ngultrum (BTN). */

  CurrencyCode["Btn"] = "BTN";
  /** Botswana Pula (BWP). */

  CurrencyCode["Bwp"] = "BWP";
  /** Belarusian Ruble (BYN). */

  CurrencyCode["Byn"] = "BYN";
  /** Belarusian Ruble (BYR). */

  CurrencyCode["Byr"] = "BYR";
  /** Belize Dollar (BZD). */

  CurrencyCode["Bzd"] = "BZD";
  /** Canadian Dollars (CAD). */

  CurrencyCode["Cad"] = "CAD";
  /** Congolese franc (CDF). */

  CurrencyCode["Cdf"] = "CDF";
  /** Swiss Francs (CHF). */

  CurrencyCode["Chf"] = "CHF";
  /** Chilean Peso (CLP). */

  CurrencyCode["Clp"] = "CLP";
  /** Chinese Yuan Renminbi (CNY). */

  CurrencyCode["Cny"] = "CNY";
  /** Colombian Peso (COP). */

  CurrencyCode["Cop"] = "COP";
  /** Costa Rican Colones (CRC). */

  CurrencyCode["Crc"] = "CRC";
  /** Cape Verdean escudo (CVE). */

  CurrencyCode["Cve"] = "CVE";
  /** Czech Koruny (CZK). */

  CurrencyCode["Czk"] = "CZK";
  /** Djiboutian Franc (DJF). */

  CurrencyCode["Djf"] = "DJF";
  /** Danish Kroner (DKK). */

  CurrencyCode["Dkk"] = "DKK";
  /** Dominican Peso (DOP). */

  CurrencyCode["Dop"] = "DOP";
  /** Algerian Dinar (DZD). */

  CurrencyCode["Dzd"] = "DZD";
  /** Egyptian Pound (EGP). */

  CurrencyCode["Egp"] = "EGP";
  /** Eritrean Nakfa (ERN). */

  CurrencyCode["Ern"] = "ERN";
  /** Ethiopian Birr (ETB). */

  CurrencyCode["Etb"] = "ETB";
  /** Euro (EUR). */

  CurrencyCode["Eur"] = "EUR";
  /** Fijian Dollars (FJD). */

  CurrencyCode["Fjd"] = "FJD";
  /** Falkland Islands Pounds (FKP). */

  CurrencyCode["Fkp"] = "FKP";
  /** United Kingdom Pounds (GBP). */

  CurrencyCode["Gbp"] = "GBP";
  /** Georgian Lari (GEL). */

  CurrencyCode["Gel"] = "GEL";
  /** Ghanaian Cedi (GHS). */

  CurrencyCode["Ghs"] = "GHS";
  /** Gibraltar Pounds (GIP). */

  CurrencyCode["Gip"] = "GIP";
  /** Gambian Dalasi (GMD). */

  CurrencyCode["Gmd"] = "GMD";
  /** Guinean Franc (GNF). */

  CurrencyCode["Gnf"] = "GNF";
  /** Guatemalan Quetzal (GTQ). */

  CurrencyCode["Gtq"] = "GTQ";
  /** Guyanese Dollar (GYD). */

  CurrencyCode["Gyd"] = "GYD";
  /** Hong Kong Dollars (HKD). */

  CurrencyCode["Hkd"] = "HKD";
  /** Honduran Lempira (HNL). */

  CurrencyCode["Hnl"] = "HNL";
  /** Croatian Kuna (HRK). */

  CurrencyCode["Hrk"] = "HRK";
  /** Haitian Gourde (HTG). */

  CurrencyCode["Htg"] = "HTG";
  /** Hungarian Forint (HUF). */

  CurrencyCode["Huf"] = "HUF";
  /** Indonesian Rupiah (IDR). */

  CurrencyCode["Idr"] = "IDR";
  /** Israeli New Shekel (NIS). */

  CurrencyCode["Ils"] = "ILS";
  /** Indian Rupees (INR). */

  CurrencyCode["Inr"] = "INR";
  /** Iraqi Dinar (IQD). */

  CurrencyCode["Iqd"] = "IQD";
  /** Iranian Rial (IRR). */

  CurrencyCode["Irr"] = "IRR";
  /** Icelandic Kronur (ISK). */

  CurrencyCode["Isk"] = "ISK";
  /** Jersey Pound. */

  CurrencyCode["Jep"] = "JEP";
  /** Jamaican Dollars (JMD). */

  CurrencyCode["Jmd"] = "JMD";
  /** Jordanian Dinar (JOD). */

  CurrencyCode["Jod"] = "JOD";
  /** Japanese Yen (JPY). */

  CurrencyCode["Jpy"] = "JPY";
  /** Kenyan Shilling (KES). */

  CurrencyCode["Kes"] = "KES";
  /** Kyrgyzstani Som (KGS). */

  CurrencyCode["Kgs"] = "KGS";
  /** Cambodian Riel. */

  CurrencyCode["Khr"] = "KHR";
  /** Kiribati Dollar (KID). */

  CurrencyCode["Kid"] = "KID";
  /** Comorian Franc (KMF). */

  CurrencyCode["Kmf"] = "KMF";
  /** South Korean Won (KRW). */

  CurrencyCode["Krw"] = "KRW";
  /** Kuwaiti Dinar (KWD). */

  CurrencyCode["Kwd"] = "KWD";
  /** Cayman Dollars (KYD). */

  CurrencyCode["Kyd"] = "KYD";
  /** Kazakhstani Tenge (KZT). */

  CurrencyCode["Kzt"] = "KZT";
  /** Laotian Kip (LAK). */

  CurrencyCode["Lak"] = "LAK";
  /** Lebanese Pounds (LBP). */

  CurrencyCode["Lbp"] = "LBP";
  /** Sri Lankan Rupees (LKR). */

  CurrencyCode["Lkr"] = "LKR";
  /** Liberian Dollar (LRD). */

  CurrencyCode["Lrd"] = "LRD";
  /** Lesotho Loti (LSL). */

  CurrencyCode["Lsl"] = "LSL";
  /** Lithuanian Litai (LTL). */

  CurrencyCode["Ltl"] = "LTL";
  /** Latvian Lati (LVL). */

  CurrencyCode["Lvl"] = "LVL";
  /** Libyan Dinar (LYD). */

  CurrencyCode["Lyd"] = "LYD";
  /** Moroccan Dirham. */

  CurrencyCode["Mad"] = "MAD";
  /** Moldovan Leu (MDL). */

  CurrencyCode["Mdl"] = "MDL";
  /** Malagasy Ariary (MGA). */

  CurrencyCode["Mga"] = "MGA";
  /** Macedonia Denar (MKD). */

  CurrencyCode["Mkd"] = "MKD";
  /** Burmese Kyat (MMK). */

  CurrencyCode["Mmk"] = "MMK";
  /** Mongolian Tugrik. */

  CurrencyCode["Mnt"] = "MNT";
  /** Macanese Pataca (MOP). */

  CurrencyCode["Mop"] = "MOP";
  /** Mauritanian Ouguiya (MRU). */

  CurrencyCode["Mru"] = "MRU";
  /** Mauritian Rupee (MUR). */

  CurrencyCode["Mur"] = "MUR";
  /** Maldivian Rufiyaa (MVR). */

  CurrencyCode["Mvr"] = "MVR";
  /** Malawian Kwacha (MWK). */

  CurrencyCode["Mwk"] = "MWK";
  /** Mexican Pesos (MXN). */

  CurrencyCode["Mxn"] = "MXN";
  /** Malaysian Ringgits (MYR). */

  CurrencyCode["Myr"] = "MYR";
  /** Mozambican Metical. */

  CurrencyCode["Mzn"] = "MZN";
  /** Namibian Dollar. */

  CurrencyCode["Nad"] = "NAD";
  /** Nigerian Naira (NGN). */

  CurrencyCode["Ngn"] = "NGN";
  /** Nicaraguan Córdoba (NIO). */

  CurrencyCode["Nio"] = "NIO";
  /** Norwegian Kroner (NOK). */

  CurrencyCode["Nok"] = "NOK";
  /** Nepalese Rupee (NPR). */

  CurrencyCode["Npr"] = "NPR";
  /** New Zealand Dollars (NZD). */

  CurrencyCode["Nzd"] = "NZD";
  /** Omani Rial (OMR). */

  CurrencyCode["Omr"] = "OMR";
  /** Panamian Balboa (PAB). */

  CurrencyCode["Pab"] = "PAB";
  /** Peruvian Nuevo Sol (PEN). */

  CurrencyCode["Pen"] = "PEN";
  /** Papua New Guinean Kina (PGK). */

  CurrencyCode["Pgk"] = "PGK";
  /** Philippine Peso (PHP). */

  CurrencyCode["Php"] = "PHP";
  /** Pakistani Rupee (PKR). */

  CurrencyCode["Pkr"] = "PKR";
  /** Polish Zlotych (PLN). */

  CurrencyCode["Pln"] = "PLN";
  /** Paraguayan Guarani (PYG). */

  CurrencyCode["Pyg"] = "PYG";
  /** Qatari Rial (QAR). */

  CurrencyCode["Qar"] = "QAR";
  /** Romanian Lei (RON). */

  CurrencyCode["Ron"] = "RON";
  /** Serbian dinar (RSD). */

  CurrencyCode["Rsd"] = "RSD";
  /** Russian Rubles (RUB). */

  CurrencyCode["Rub"] = "RUB";
  /** Rwandan Franc (RWF). */

  CurrencyCode["Rwf"] = "RWF";
  /** Saudi Riyal (SAR). */

  CurrencyCode["Sar"] = "SAR";
  /** Solomon Islands Dollar (SBD). */

  CurrencyCode["Sbd"] = "SBD";
  /** Seychellois Rupee (SCR). */

  CurrencyCode["Scr"] = "SCR";
  /** Sudanese Pound (SDG). */

  CurrencyCode["Sdg"] = "SDG";
  /** Swedish Kronor (SEK). */

  CurrencyCode["Sek"] = "SEK";
  /** Singapore Dollars (SGD). */

  CurrencyCode["Sgd"] = "SGD";
  /** Saint Helena Pounds (SHP). */

  CurrencyCode["Shp"] = "SHP";
  /** Sierra Leonean Leone (SLL). */

  CurrencyCode["Sll"] = "SLL";
  /** Somali Shilling (SOS). */

  CurrencyCode["Sos"] = "SOS";
  /** Surinamese Dollar (SRD). */

  CurrencyCode["Srd"] = "SRD";
  /** South Sudanese Pound (SSP). */

  CurrencyCode["Ssp"] = "SSP";
  /** Sao Tome And Principe Dobra (STD). */

  CurrencyCode["Std"] = "STD";
  /** Sao Tome And Principe Dobra (STN). */

  CurrencyCode["Stn"] = "STN";
  /** Syrian Pound (SYP). */

  CurrencyCode["Syp"] = "SYP";
  /** Swazi Lilangeni (SZL). */

  CurrencyCode["Szl"] = "SZL";
  /** Thai baht (THB). */

  CurrencyCode["Thb"] = "THB";
  /** Tajikistani Somoni (TJS). */

  CurrencyCode["Tjs"] = "TJS";
  /** Turkmenistani Manat (TMT). */

  CurrencyCode["Tmt"] = "TMT";
  /** Tunisian Dinar (TND). */

  CurrencyCode["Tnd"] = "TND";
  /** Tongan Pa'anga (TOP). */

  CurrencyCode["Top"] = "TOP";
  /** Turkish Lira (TRY). */

  CurrencyCode["Try"] = "TRY";
  /** Trinidad and Tobago Dollars (TTD). */

  CurrencyCode["Ttd"] = "TTD";
  /** Taiwan Dollars (TWD). */

  CurrencyCode["Twd"] = "TWD";
  /** Tanzanian Shilling (TZS). */

  CurrencyCode["Tzs"] = "TZS";
  /** Ukrainian Hryvnia (UAH). */

  CurrencyCode["Uah"] = "UAH";
  /** Ugandan Shilling (UGX). */

  CurrencyCode["Ugx"] = "UGX";
  /** United States Dollars (USD). */

  CurrencyCode["Usd"] = "USD";
  /** Uruguayan Pesos (UYU). */

  CurrencyCode["Uyu"] = "UYU";
  /** Uzbekistan som (UZS). */

  CurrencyCode["Uzs"] = "UZS";
  /** Venezuelan Bolivares (VED). */

  CurrencyCode["Ved"] = "VED";
  /** Venezuelan Bolivares (VEF). */

  CurrencyCode["Vef"] = "VEF";
  /** Venezuelan Bolivares (VES). */

  CurrencyCode["Ves"] = "VES";
  /** Vietnamese đồng (VND). */

  CurrencyCode["Vnd"] = "VND";
  /** Vanuatu Vatu (VUV). */

  CurrencyCode["Vuv"] = "VUV";
  /** Samoan Tala (WST). */

  CurrencyCode["Wst"] = "WST";
  /** Central African CFA Franc (XAF). */

  CurrencyCode["Xaf"] = "XAF";
  /** East Caribbean Dollar (XCD). */

  CurrencyCode["Xcd"] = "XCD";
  /** West African CFA franc (XOF). */

  CurrencyCode["Xof"] = "XOF";
  /** CFP Franc (XPF). */

  CurrencyCode["Xpf"] = "XPF";
  /** Unrecognized currency. */

  CurrencyCode["Xxx"] = "XXX";
  /** Yemeni Rial (YER). */

  CurrencyCode["Yer"] = "YER";
  /** South African Rand (ZAR). */

  CurrencyCode["Zar"] = "ZAR";
  /** Zambian Kwacha (ZMW). */

  CurrencyCode["Zmw"] = "ZMW";
})(CurrencyCode || (CurrencyCode = {}));
/** Possible error codes that can be returned by `CustomerUserError`. */


var CustomerErrorCode;

(function (CustomerErrorCode) {
  /** Customer already enabled. */
  CustomerErrorCode["AlreadyEnabled"] = "ALREADY_ENABLED";
  /** Input email contains an invalid domain name. */

  CustomerErrorCode["BadDomain"] = "BAD_DOMAIN";
  /** The input value is blank. */

  CustomerErrorCode["Blank"] = "BLANK";
  /** Input contains HTML tags. */

  CustomerErrorCode["ContainsHtmlTags"] = "CONTAINS_HTML_TAGS";
  /** Input contains URL. */

  CustomerErrorCode["ContainsUrl"] = "CONTAINS_URL";
  /** Customer is disabled. */

  CustomerErrorCode["CustomerDisabled"] = "CUSTOMER_DISABLED";
  /** The input value is invalid. */

  CustomerErrorCode["Invalid"] = "INVALID";
  /** Multipass token is not valid. */

  CustomerErrorCode["InvalidMultipassRequest"] = "INVALID_MULTIPASS_REQUEST";
  /** Address does not exist. */

  CustomerErrorCode["NotFound"] = "NOT_FOUND";
  /** Input password starts or ends with whitespace. */

  CustomerErrorCode["PasswordStartsOrEndsWithWhitespace"] = "PASSWORD_STARTS_OR_ENDS_WITH_WHITESPACE";
  /** The input value is already taken. */

  CustomerErrorCode["Taken"] = "TAKEN";
  /** Invalid activation token. */

  CustomerErrorCode["TokenInvalid"] = "TOKEN_INVALID";
  /** The input value is too long. */

  CustomerErrorCode["TooLong"] = "TOO_LONG";
  /** The input value is too short. */

  CustomerErrorCode["TooShort"] = "TOO_SHORT";
  /** Unidentified customer. */

  CustomerErrorCode["UnidentifiedCustomer"] = "UNIDENTIFIED_CUSTOMER";
})(CustomerErrorCode || (CustomerErrorCode = {}));
/** List of different delivery method types. */


var DeliveryMethodType;

(function (DeliveryMethodType) {
  /** Local Delivery. */
  DeliveryMethodType["Local"] = "LOCAL";
  /** None. */

  DeliveryMethodType["None"] = "NONE";
  /** Shipping to a Pickup Point. */

  DeliveryMethodType["PickupPoint"] = "PICKUP_POINT";
  /** Local Pickup. */

  DeliveryMethodType["PickUp"] = "PICK_UP";
  /** Retail. */

  DeliveryMethodType["Retail"] = "RETAIL";
  /** Shipping. */

  DeliveryMethodType["Shipping"] = "SHIPPING";
})(DeliveryMethodType || (DeliveryMethodType = {}));
/** Digital wallet, such as Apple Pay, which can be used for accelerated checkouts. */


var DigitalWallet;

(function (DigitalWallet) {
  /** Android Pay. */
  DigitalWallet["AndroidPay"] = "ANDROID_PAY";
  /** Apple Pay. */

  DigitalWallet["ApplePay"] = "APPLE_PAY";
  /** Google Pay. */

  DigitalWallet["GooglePay"] = "GOOGLE_PAY";
  /** Shopify Pay. */

  DigitalWallet["ShopifyPay"] = "SHOPIFY_PAY";
})(DigitalWallet || (DigitalWallet = {}));
/** The method by which the discount's value is allocated onto its entitled lines. */


var DiscountApplicationAllocationMethod;

(function (DiscountApplicationAllocationMethod) {
  /** The value is spread across all entitled lines. */
  DiscountApplicationAllocationMethod["Across"] = "ACROSS";
  /** The value is applied onto every entitled line. */

  DiscountApplicationAllocationMethod["Each"] = "EACH";
  /** The value is specifically applied onto a particular line. */

  DiscountApplicationAllocationMethod["One"] = "ONE";
})(DiscountApplicationAllocationMethod || (DiscountApplicationAllocationMethod = {}));
/**
 * The lines on the order to which the discount is applied, of the type defined by
 * the discount application's `targetType`. For example, the value `ENTITLED`, combined with a `targetType` of
 * `LINE_ITEM`, applies the discount on all line items that are entitled to the discount.
 * The value `ALL`, combined with a `targetType` of `SHIPPING_LINE`, applies the discount on all shipping lines.
 *
 */


var DiscountApplicationTargetSelection;

(function (DiscountApplicationTargetSelection) {
  /** The discount is allocated onto all the lines. */
  DiscountApplicationTargetSelection["All"] = "ALL";
  /** The discount is allocated onto only the lines that it's entitled for. */

  DiscountApplicationTargetSelection["Entitled"] = "ENTITLED";
  /** The discount is allocated onto explicitly chosen lines. */

  DiscountApplicationTargetSelection["Explicit"] = "EXPLICIT";
})(DiscountApplicationTargetSelection || (DiscountApplicationTargetSelection = {}));
/**
 * The type of line (i.e. line item or shipping line) on an order that the discount is applicable towards.
 *
 */


var DiscountApplicationTargetType;

(function (DiscountApplicationTargetType) {
  /** The discount applies onto line items. */
  DiscountApplicationTargetType["LineItem"] = "LINE_ITEM";
  /** The discount applies onto shipping lines. */

  DiscountApplicationTargetType["ShippingLine"] = "SHIPPING_LINE";
})(DiscountApplicationTargetType || (DiscountApplicationTargetType = {}));
/**
 * The type of data that the filter group represents.
 *
 * For more information, refer to [Filter products in a collection with the Storefront API]
 * (https://shopify.dev/api/examples/filter-products).
 *
 */


var FilterType;

(function (FilterType) {
  /** A boolean value. */
  FilterType["Boolean"] = "BOOLEAN";
  /** A list of selectable values. */

  FilterType["List"] = "LIST";
  /** A range of prices. */

  FilterType["PriceRange"] = "PRICE_RANGE";
})(FilterType || (FilterType = {}));
/** List of supported image content types. */


var ImageContentType;

(function (ImageContentType) {
  /** A JPG image. */
  ImageContentType["Jpg"] = "JPG";
  /** A PNG image. */

  ImageContentType["Png"] = "PNG";
  /** A WEBP image. */

  ImageContentType["Webp"] = "WEBP";
})(ImageContentType || (ImageContentType = {}));
/** ISO 639-1 language codes supported by Shopify. */


var LanguageCode;

(function (LanguageCode) {
  /** Afrikaans. */
  LanguageCode["Af"] = "AF";
  /** Akan. */

  LanguageCode["Ak"] = "AK";
  /** Amharic. */

  LanguageCode["Am"] = "AM";
  /** Arabic. */

  LanguageCode["Ar"] = "AR";
  /** Assamese. */

  LanguageCode["As"] = "AS";
  /** Azerbaijani. */

  LanguageCode["Az"] = "AZ";
  /** Belarusian. */

  LanguageCode["Be"] = "BE";
  /** Bulgarian. */

  LanguageCode["Bg"] = "BG";
  /** Bambara. */

  LanguageCode["Bm"] = "BM";
  /** Bangla. */

  LanguageCode["Bn"] = "BN";
  /** Tibetan. */

  LanguageCode["Bo"] = "BO";
  /** Breton. */

  LanguageCode["Br"] = "BR";
  /** Bosnian. */

  LanguageCode["Bs"] = "BS";
  /** Catalan. */

  LanguageCode["Ca"] = "CA";
  /** Chechen. */

  LanguageCode["Ce"] = "CE";
  /** Czech. */

  LanguageCode["Cs"] = "CS";
  /** Church Slavic. */

  LanguageCode["Cu"] = "CU";
  /** Welsh. */

  LanguageCode["Cy"] = "CY";
  /** Danish. */

  LanguageCode["Da"] = "DA";
  /** German. */

  LanguageCode["De"] = "DE";
  /** Dzongkha. */

  LanguageCode["Dz"] = "DZ";
  /** Ewe. */

  LanguageCode["Ee"] = "EE";
  /** Greek. */

  LanguageCode["El"] = "EL";
  /** English. */

  LanguageCode["En"] = "EN";
  /** Esperanto. */

  LanguageCode["Eo"] = "EO";
  /** Spanish. */

  LanguageCode["Es"] = "ES";
  /** Estonian. */

  LanguageCode["Et"] = "ET";
  /** Basque. */

  LanguageCode["Eu"] = "EU";
  /** Persian. */

  LanguageCode["Fa"] = "FA";
  /** Fulah. */

  LanguageCode["Ff"] = "FF";
  /** Finnish. */

  LanguageCode["Fi"] = "FI";
  /** Faroese. */

  LanguageCode["Fo"] = "FO";
  /** French. */

  LanguageCode["Fr"] = "FR";
  /** Western Frisian. */

  LanguageCode["Fy"] = "FY";
  /** Irish. */

  LanguageCode["Ga"] = "GA";
  /** Scottish Gaelic. */

  LanguageCode["Gd"] = "GD";
  /** Galician. */

  LanguageCode["Gl"] = "GL";
  /** Gujarati. */

  LanguageCode["Gu"] = "GU";
  /** Manx. */

  LanguageCode["Gv"] = "GV";
  /** Hausa. */

  LanguageCode["Ha"] = "HA";
  /** Hebrew. */

  LanguageCode["He"] = "HE";
  /** Hindi. */

  LanguageCode["Hi"] = "HI";
  /** Croatian. */

  LanguageCode["Hr"] = "HR";
  /** Hungarian. */

  LanguageCode["Hu"] = "HU";
  /** Armenian. */

  LanguageCode["Hy"] = "HY";
  /** Interlingua. */

  LanguageCode["Ia"] = "IA";
  /** Indonesian. */

  LanguageCode["Id"] = "ID";
  /** Igbo. */

  LanguageCode["Ig"] = "IG";
  /** Sichuan Yi. */

  LanguageCode["Ii"] = "II";
  /** Icelandic. */

  LanguageCode["Is"] = "IS";
  /** Italian. */

  LanguageCode["It"] = "IT";
  /** Japanese. */

  LanguageCode["Ja"] = "JA";
  /** Javanese. */

  LanguageCode["Jv"] = "JV";
  /** Georgian. */

  LanguageCode["Ka"] = "KA";
  /** Kikuyu. */

  LanguageCode["Ki"] = "KI";
  /** Kazakh. */

  LanguageCode["Kk"] = "KK";
  /** Kalaallisut. */

  LanguageCode["Kl"] = "KL";
  /** Khmer. */

  LanguageCode["Km"] = "KM";
  /** Kannada. */

  LanguageCode["Kn"] = "KN";
  /** Korean. */

  LanguageCode["Ko"] = "KO";
  /** Kashmiri. */

  LanguageCode["Ks"] = "KS";
  /** Kurdish. */

  LanguageCode["Ku"] = "KU";
  /** Cornish. */

  LanguageCode["Kw"] = "KW";
  /** Kyrgyz. */

  LanguageCode["Ky"] = "KY";
  /** Luxembourgish. */

  LanguageCode["Lb"] = "LB";
  /** Ganda. */

  LanguageCode["Lg"] = "LG";
  /** Lingala. */

  LanguageCode["Ln"] = "LN";
  /** Lao. */

  LanguageCode["Lo"] = "LO";
  /** Lithuanian. */

  LanguageCode["Lt"] = "LT";
  /** Luba-Katanga. */

  LanguageCode["Lu"] = "LU";
  /** Latvian. */

  LanguageCode["Lv"] = "LV";
  /** Malagasy. */

  LanguageCode["Mg"] = "MG";
  /** Maori. */

  LanguageCode["Mi"] = "MI";
  /** Macedonian. */

  LanguageCode["Mk"] = "MK";
  /** Malayalam. */

  LanguageCode["Ml"] = "ML";
  /** Mongolian. */

  LanguageCode["Mn"] = "MN";
  /** Marathi. */

  LanguageCode["Mr"] = "MR";
  /** Malay. */

  LanguageCode["Ms"] = "MS";
  /** Maltese. */

  LanguageCode["Mt"] = "MT";
  /** Burmese. */

  LanguageCode["My"] = "MY";
  /** Norwegian (Bokmål). */

  LanguageCode["Nb"] = "NB";
  /** North Ndebele. */

  LanguageCode["Nd"] = "ND";
  /** Nepali. */

  LanguageCode["Ne"] = "NE";
  /** Dutch. */

  LanguageCode["Nl"] = "NL";
  /** Norwegian Nynorsk. */

  LanguageCode["Nn"] = "NN";
  /** Norwegian. */

  LanguageCode["No"] = "NO";
  /** Oromo. */

  LanguageCode["Om"] = "OM";
  /** Odia. */

  LanguageCode["Or"] = "OR";
  /** Ossetic. */

  LanguageCode["Os"] = "OS";
  /** Punjabi. */

  LanguageCode["Pa"] = "PA";
  /** Polish. */

  LanguageCode["Pl"] = "PL";
  /** Pashto. */

  LanguageCode["Ps"] = "PS";
  /** Portuguese. */

  LanguageCode["Pt"] = "PT";
  /** Portuguese (Brazil). */

  LanguageCode["PtBr"] = "PT_BR";
  /** Portuguese (Portugal). */

  LanguageCode["PtPt"] = "PT_PT";
  /** Quechua. */

  LanguageCode["Qu"] = "QU";
  /** Romansh. */

  LanguageCode["Rm"] = "RM";
  /** Rundi. */

  LanguageCode["Rn"] = "RN";
  /** Romanian. */

  LanguageCode["Ro"] = "RO";
  /** Russian. */

  LanguageCode["Ru"] = "RU";
  /** Kinyarwanda. */

  LanguageCode["Rw"] = "RW";
  /** Sindhi. */

  LanguageCode["Sd"] = "SD";
  /** Northern Sami. */

  LanguageCode["Se"] = "SE";
  /** Sango. */

  LanguageCode["Sg"] = "SG";
  /** Sinhala. */

  LanguageCode["Si"] = "SI";
  /** Slovak. */

  LanguageCode["Sk"] = "SK";
  /** Slovenian. */

  LanguageCode["Sl"] = "SL";
  /** Shona. */

  LanguageCode["Sn"] = "SN";
  /** Somali. */

  LanguageCode["So"] = "SO";
  /** Albanian. */

  LanguageCode["Sq"] = "SQ";
  /** Serbian. */

  LanguageCode["Sr"] = "SR";
  /** Sundanese. */

  LanguageCode["Su"] = "SU";
  /** Swedish. */

  LanguageCode["Sv"] = "SV";
  /** Swahili. */

  LanguageCode["Sw"] = "SW";
  /** Tamil. */

  LanguageCode["Ta"] = "TA";
  /** Telugu. */

  LanguageCode["Te"] = "TE";
  /** Tajik. */

  LanguageCode["Tg"] = "TG";
  /** Thai. */

  LanguageCode["Th"] = "TH";
  /** Tigrinya. */

  LanguageCode["Ti"] = "TI";
  /** Turkmen. */

  LanguageCode["Tk"] = "TK";
  /** Tongan. */

  LanguageCode["To"] = "TO";
  /** Turkish. */

  LanguageCode["Tr"] = "TR";
  /** Tatar. */

  LanguageCode["Tt"] = "TT";
  /** Uyghur. */

  LanguageCode["Ug"] = "UG";
  /** Ukrainian. */

  LanguageCode["Uk"] = "UK";
  /** Urdu. */

  LanguageCode["Ur"] = "UR";
  /** Uzbek. */

  LanguageCode["Uz"] = "UZ";
  /** Vietnamese. */

  LanguageCode["Vi"] = "VI";
  /** Volapük. */

  LanguageCode["Vo"] = "VO";
  /** Wolof. */

  LanguageCode["Wo"] = "WO";
  /** Xhosa. */

  LanguageCode["Xh"] = "XH";
  /** Yiddish. */

  LanguageCode["Yi"] = "YI";
  /** Yoruba. */

  LanguageCode["Yo"] = "YO";
  /** Chinese. */

  LanguageCode["Zh"] = "ZH";
  /** Chinese (Simplified). */

  LanguageCode["ZhCn"] = "ZH_CN";
  /** Chinese (Traditional). */

  LanguageCode["ZhTw"] = "ZH_TW";
  /** Zulu. */

  LanguageCode["Zu"] = "ZU";
})(LanguageCode || (LanguageCode = {}));
/** The set of valid sort keys for the Location query. */


var LocationSortKeys;

(function (LocationSortKeys) {
  /** Sort by the `city` value. */
  LocationSortKeys["City"] = "CITY";
  /** Sort by the `distance` value. */

  LocationSortKeys["Distance"] = "DISTANCE";
  /** Sort by the `id` value. */

  LocationSortKeys["Id"] = "ID";
  /** Sort by the `name` value. */

  LocationSortKeys["Name"] = "NAME";
})(LocationSortKeys || (LocationSortKeys = {}));
/** The possible content types for a media object. */


var MediaContentType;

(function (MediaContentType) {
  /** An externally hosted video. */
  MediaContentType["ExternalVideo"] = "EXTERNAL_VIDEO";
  /** A Shopify hosted image. */

  MediaContentType["Image"] = "IMAGE";
  /** A 3d model. */

  MediaContentType["Model_3D"] = "MODEL_3D";
  /** A Shopify hosted video. */

  MediaContentType["Video"] = "VIDEO";
})(MediaContentType || (MediaContentType = {}));
/** Host for a Media Resource. */


var MediaHost;

(function (MediaHost) {
  /** Host for Vimeo embedded videos. */
  MediaHost["Vimeo"] = "VIMEO";
  /** Host for YouTube embedded videos. */

  MediaHost["Youtube"] = "YOUTUBE";
})(MediaHost || (MediaHost = {}));
/** A menu item type. */


var MenuItemType;

(function (MenuItemType) {
  /** An article link. */
  MenuItemType["Article"] = "ARTICLE";
  /** A blog link. */

  MenuItemType["Blog"] = "BLOG";
  /** A catalog link. */

  MenuItemType["Catalog"] = "CATALOG";
  /** A collection link. */

  MenuItemType["Collection"] = "COLLECTION";
  /** A collection link. */

  MenuItemType["Collections"] = "COLLECTIONS";
  /** A frontpage link. */

  MenuItemType["Frontpage"] = "FRONTPAGE";
  /** An http link. */

  MenuItemType["Http"] = "HTTP";
  /** A page link. */

  MenuItemType["Page"] = "PAGE";
  /** A product link. */

  MenuItemType["Product"] = "PRODUCT";
  /** A search link. */

  MenuItemType["Search"] = "SEARCH";
  /** A shop policy link. */

  MenuItemType["ShopPolicy"] = "SHOP_POLICY";
})(MenuItemType || (MenuItemType = {}));
/** Represents the reason for the order's cancellation. */


var OrderCancelReason;

(function (OrderCancelReason) {
  /** The customer wanted to cancel the order. */
  OrderCancelReason["Customer"] = "CUSTOMER";
  /** Payment was declined. */

  OrderCancelReason["Declined"] = "DECLINED";
  /** The order was fraudulent. */

  OrderCancelReason["Fraud"] = "FRAUD";
  /** There was insufficient inventory. */

  OrderCancelReason["Inventory"] = "INVENTORY";
  /** The order was canceled for an unlisted reason. */

  OrderCancelReason["Other"] = "OTHER";
})(OrderCancelReason || (OrderCancelReason = {}));
/** Represents the order's current financial status. */


var OrderFinancialStatus;

(function (OrderFinancialStatus) {
  /** Displayed as **Authorized**. */
  OrderFinancialStatus["Authorized"] = "AUTHORIZED";
  /** Displayed as **Paid**. */

  OrderFinancialStatus["Paid"] = "PAID";
  /** Displayed as **Partially paid**. */

  OrderFinancialStatus["PartiallyPaid"] = "PARTIALLY_PAID";
  /** Displayed as **Partially refunded**. */

  OrderFinancialStatus["PartiallyRefunded"] = "PARTIALLY_REFUNDED";
  /** Displayed as **Pending**. */

  OrderFinancialStatus["Pending"] = "PENDING";
  /** Displayed as **Refunded**. */

  OrderFinancialStatus["Refunded"] = "REFUNDED";
  /** Displayed as **Voided**. */

  OrderFinancialStatus["Voided"] = "VOIDED";
})(OrderFinancialStatus || (OrderFinancialStatus = {}));
/** Represents the order's aggregated fulfillment status for display purposes. */


var OrderFulfillmentStatus;

(function (OrderFulfillmentStatus) {
  /** Displayed as **Fulfilled**. All of the items in the order have been fulfilled. */
  OrderFulfillmentStatus["Fulfilled"] = "FULFILLED";
  /** Displayed as **In progress**. Some of the items in the order have been fulfilled, or a request for fulfillment has been sent to the fulfillment service. */

  OrderFulfillmentStatus["InProgress"] = "IN_PROGRESS";
  /** Displayed as **On hold**. All of the unfulfilled items in this order are on hold. */

  OrderFulfillmentStatus["OnHold"] = "ON_HOLD";
  /** Displayed as **Open**. None of the items in the order have been fulfilled. Replaced by "UNFULFILLED" status. */

  OrderFulfillmentStatus["Open"] = "OPEN";
  /** Displayed as **Partially fulfilled**. Some of the items in the order have been fulfilled. */

  OrderFulfillmentStatus["PartiallyFulfilled"] = "PARTIALLY_FULFILLED";
  /** Displayed as **Pending fulfillment**. A request for fulfillment of some items awaits a response from the fulfillment service. Replaced by "IN_PROGRESS" status. */

  OrderFulfillmentStatus["PendingFulfillment"] = "PENDING_FULFILLMENT";
  /** Displayed as **Restocked**. All of the items in the order have been restocked. Replaced by "UNFULFILLED" status. */

  OrderFulfillmentStatus["Restocked"] = "RESTOCKED";
  /** Displayed as **Scheduled**. All of the unfulfilled items in this order are scheduled for fulfillment at later time. */

  OrderFulfillmentStatus["Scheduled"] = "SCHEDULED";
  /** Displayed as **Unfulfilled**. None of the items in the order have been fulfilled. */

  OrderFulfillmentStatus["Unfulfilled"] = "UNFULFILLED";
})(OrderFulfillmentStatus || (OrderFulfillmentStatus = {}));
/** The set of valid sort keys for the Order query. */


var OrderSortKeys;

(function (OrderSortKeys) {
  /** Sort by the `id` value. */
  OrderSortKeys["Id"] = "ID";
  /** Sort by the `processed_at` value. */

  OrderSortKeys["ProcessedAt"] = "PROCESSED_AT";
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   *
   */

  OrderSortKeys["Relevance"] = "RELEVANCE";
  /** Sort by the `total_price` value. */

  OrderSortKeys["TotalPrice"] = "TOTAL_PRICE";
})(OrderSortKeys || (OrderSortKeys = {}));
/** The set of valid sort keys for the Page query. */


var PageSortKeys;

(function (PageSortKeys) {
  /** Sort by the `id` value. */
  PageSortKeys["Id"] = "ID";
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   *
   */

  PageSortKeys["Relevance"] = "RELEVANCE";
  /** Sort by the `title` value. */

  PageSortKeys["Title"] = "TITLE";
  /** Sort by the `updated_at` value. */

  PageSortKeys["UpdatedAt"] = "UPDATED_AT";
})(PageSortKeys || (PageSortKeys = {}));
/** The valid values for the types of payment token. */


var PaymentTokenType;

(function (PaymentTokenType) {
  /** Apple Pay token type. */
  PaymentTokenType["ApplePay"] = "APPLE_PAY";
  /** Google Pay token type. */

  PaymentTokenType["GooglePay"] = "GOOGLE_PAY";
  /** Shopify Pay token type. */

  PaymentTokenType["ShopifyPay"] = "SHOPIFY_PAY";
  /** Stripe token type. */

  PaymentTokenType["StripeVaultToken"] = "STRIPE_VAULT_TOKEN";
  /** Vault payment token type. */

  PaymentTokenType["Vault"] = "VAULT";
})(PaymentTokenType || (PaymentTokenType = {}));
/** The set of valid sort keys for the ProductCollection query. */


var ProductCollectionSortKeys;

(function (ProductCollectionSortKeys) {
  /** Sort by the `best-selling` value. */
  ProductCollectionSortKeys["BestSelling"] = "BEST_SELLING";
  /** Sort by the `collection-default` value. */

  ProductCollectionSortKeys["CollectionDefault"] = "COLLECTION_DEFAULT";
  /** Sort by the `created` value. */

  ProductCollectionSortKeys["Created"] = "CREATED";
  /** Sort by the `id` value. */

  ProductCollectionSortKeys["Id"] = "ID";
  /** Sort by the `manual` value. */

  ProductCollectionSortKeys["Manual"] = "MANUAL";
  /** Sort by the `price` value. */

  ProductCollectionSortKeys["Price"] = "PRICE";
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   *
   */

  ProductCollectionSortKeys["Relevance"] = "RELEVANCE";
  /** Sort by the `title` value. */

  ProductCollectionSortKeys["Title"] = "TITLE";
})(ProductCollectionSortKeys || (ProductCollectionSortKeys = {}));
/** The set of valid sort keys for the ProductImage query. */


var ProductImageSortKeys;

(function (ProductImageSortKeys) {
  /** Sort by the `created_at` value. */
  ProductImageSortKeys["CreatedAt"] = "CREATED_AT";
  /** Sort by the `id` value. */

  ProductImageSortKeys["Id"] = "ID";
  /** Sort by the `position` value. */

  ProductImageSortKeys["Position"] = "POSITION";
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   *
   */

  ProductImageSortKeys["Relevance"] = "RELEVANCE";
})(ProductImageSortKeys || (ProductImageSortKeys = {}));
/** The set of valid sort keys for the ProductMedia query. */


var ProductMediaSortKeys;

(function (ProductMediaSortKeys) {
  /** Sort by the `id` value. */
  ProductMediaSortKeys["Id"] = "ID";
  /** Sort by the `position` value. */

  ProductMediaSortKeys["Position"] = "POSITION";
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   *
   */

  ProductMediaSortKeys["Relevance"] = "RELEVANCE";
})(ProductMediaSortKeys || (ProductMediaSortKeys = {}));
/** The set of valid sort keys for the Product query. */


var ProductSortKeys;

(function (ProductSortKeys) {
  /** Sort by the `best_selling` value. */
  ProductSortKeys["BestSelling"] = "BEST_SELLING";
  /** Sort by the `created_at` value. */

  ProductSortKeys["CreatedAt"] = "CREATED_AT";
  /** Sort by the `id` value. */

  ProductSortKeys["Id"] = "ID";
  /** Sort by the `price` value. */

  ProductSortKeys["Price"] = "PRICE";
  /** Sort by the `product_type` value. */

  ProductSortKeys["ProductType"] = "PRODUCT_TYPE";
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   *
   */

  ProductSortKeys["Relevance"] = "RELEVANCE";
  /** Sort by the `title` value. */

  ProductSortKeys["Title"] = "TITLE";
  /** Sort by the `updated_at` value. */

  ProductSortKeys["UpdatedAt"] = "UPDATED_AT";
  /** Sort by the `vendor` value. */

  ProductSortKeys["Vendor"] = "VENDOR";
})(ProductSortKeys || (ProductSortKeys = {}));
/** The set of valid sort keys for the ProductVariant query. */


var ProductVariantSortKeys;

(function (ProductVariantSortKeys) {
  /** Sort by the `id` value. */
  ProductVariantSortKeys["Id"] = "ID";
  /** Sort by the `position` value. */

  ProductVariantSortKeys["Position"] = "POSITION";
  /**
   * Sort by relevance to the search terms when the `query` parameter is specified on the connection.
   * Don't use this sort key when no search query is specified.
   *
   */

  ProductVariantSortKeys["Relevance"] = "RELEVANCE";
  /** Sort by the `sku` value. */

  ProductVariantSortKeys["Sku"] = "SKU";
  /** Sort by the `title` value. */

  ProductVariantSortKeys["Title"] = "TITLE";
})(ProductVariantSortKeys || (ProductVariantSortKeys = {}));
/** The checkout charge when the full amount isn't charged at checkout. */


var SellingPlanCheckoutChargeType;

(function (SellingPlanCheckoutChargeType) {
  /** The checkout charge is a percentage of the product or variant price. */
  SellingPlanCheckoutChargeType["Percentage"] = "PERCENTAGE";
  /** The checkout charge is a fixed price amount. */

  SellingPlanCheckoutChargeType["Price"] = "PRICE";
})(SellingPlanCheckoutChargeType || (SellingPlanCheckoutChargeType = {}));
/** The different kinds of order transactions. */


var TransactionKind;

(function (TransactionKind) {
  /**
   * An amount reserved against the cardholder's funding source.
   * Money does not change hands until the authorization is captured.
   *
   */
  TransactionKind["Authorization"] = "AUTHORIZATION";
  /** A transfer of the money that was reserved during the authorization stage. */

  TransactionKind["Capture"] = "CAPTURE";
  /** Money returned to the customer when they have paid too much. */

  TransactionKind["Change"] = "CHANGE";
  /** An authorization for a payment taken with an EMV credit card reader. */

  TransactionKind["EmvAuthorization"] = "EMV_AUTHORIZATION";
  /** An authorization and capture performed together in a single step. */

  TransactionKind["Sale"] = "SALE";
})(TransactionKind || (TransactionKind = {}));
/** Transaction statuses describe the status of a transaction. */


var TransactionStatus;

(function (TransactionStatus) {
  /** There was an error while processing the transaction. */
  TransactionStatus["Error"] = "ERROR";
  /** The transaction failed. */

  TransactionStatus["Failure"] = "FAILURE";
  /** The transaction is pending. */

  TransactionStatus["Pending"] = "PENDING";
  /** The transaction succeeded. */

  TransactionStatus["Success"] = "SUCCESS";
})(TransactionStatus || (TransactionStatus = {}));
/** The accepted types of unit of measurement. */


var UnitPriceMeasurementMeasuredType;

(function (UnitPriceMeasurementMeasuredType) {
  /** Unit of measurements representing areas. */
  UnitPriceMeasurementMeasuredType["Area"] = "AREA";
  /** Unit of measurements representing lengths. */

  UnitPriceMeasurementMeasuredType["Length"] = "LENGTH";
  /** Unit of measurements representing volumes. */

  UnitPriceMeasurementMeasuredType["Volume"] = "VOLUME";
  /** Unit of measurements representing weights. */

  UnitPriceMeasurementMeasuredType["Weight"] = "WEIGHT";
})(UnitPriceMeasurementMeasuredType || (UnitPriceMeasurementMeasuredType = {}));
/** The valid units of measurement for a unit price measurement. */


var UnitPriceMeasurementMeasuredUnit;

(function (UnitPriceMeasurementMeasuredUnit) {
  /** 100 centiliters equals 1 liter. */
  UnitPriceMeasurementMeasuredUnit["Cl"] = "CL";
  /** 100 centimeters equals 1 meter. */

  UnitPriceMeasurementMeasuredUnit["Cm"] = "CM";
  /** Metric system unit of weight. */

  UnitPriceMeasurementMeasuredUnit["G"] = "G";
  /** 1 kilogram equals 1000 grams. */

  UnitPriceMeasurementMeasuredUnit["Kg"] = "KG";
  /** Metric system unit of volume. */

  UnitPriceMeasurementMeasuredUnit["L"] = "L";
  /** Metric system unit of length. */

  UnitPriceMeasurementMeasuredUnit["M"] = "M";
  /** Metric system unit of area. */

  UnitPriceMeasurementMeasuredUnit["M2"] = "M2";
  /** 1 cubic meter equals 1000 liters. */

  UnitPriceMeasurementMeasuredUnit["M3"] = "M3";
  /** 1000 milligrams equals 1 gram. */

  UnitPriceMeasurementMeasuredUnit["Mg"] = "MG";
  /** 1000 milliliters equals 1 liter. */

  UnitPriceMeasurementMeasuredUnit["Ml"] = "ML";
  /** 1000 millimeters equals 1 meter. */

  UnitPriceMeasurementMeasuredUnit["Mm"] = "MM";
})(UnitPriceMeasurementMeasuredUnit || (UnitPriceMeasurementMeasuredUnit = {}));
/** Systems of weights and measures. */


var UnitSystem;

(function (UnitSystem) {
  /** Imperial system of weights and measures. */
  UnitSystem["ImperialSystem"] = "IMPERIAL_SYSTEM";
  /** Metric system of weights and measures. */

  UnitSystem["MetricSystem"] = "METRIC_SYSTEM";
})(UnitSystem || (UnitSystem = {}));
/** Units of measurement for weight. */


var WeightUnit;

(function (WeightUnit) {
  /** Metric system unit of mass. */
  WeightUnit["Grams"] = "GRAMS";
  /** 1 kilogram equals 1000 grams. */

  WeightUnit["Kilograms"] = "KILOGRAMS";
  /** Imperial system unit of mass. */

  WeightUnit["Ounces"] = "OUNCES";
  /** 1 pound equals 16 ounces. */

  WeightUnit["Pounds"] = "POUNDS";
})(WeightUnit || (WeightUnit = {}));

var _ImageFragmentDoc = /*#__PURE__*/gql(_templateObject || (_templateObject = /*#__PURE__*/_taggedTemplateLiteralLoose(["\n    fragment _Image on Image {\n  id\n  altText\n  originalSrc\n  width\n  height\n}\n    "])));
var _CartFragmentDoc = /*#__PURE__*/gql(_templateObject2 || (_templateObject2 = /*#__PURE__*/_taggedTemplateLiteralLoose(["\n    fragment _Cart on Cart {\n  id\n  checkoutUrl\n  lines(first: 250) {\n    edges {\n      node {\n        id\n        quantity\n        merchandise {\n          ... on ProductVariant {\n            id\n            selectedOptions {\n              name\n              value\n            }\n            title\n            availableForSale\n            quantityAvailable\n            priceV2 {\n              amount\n              currencyCode\n            }\n            image {\n              ..._Image\n            }\n            product {\n              id\n              title\n              handle\n              description\n            }\n          }\n        }\n        estimatedCost {\n          subtotalAmount {\n            amount\n            currencyCode\n          }\n          totalAmount {\n            amount\n            currencyCode\n          }\n        }\n        discountAllocations {\n          discountedAmount {\n            amount\n            currencyCode\n          }\n        }\n        attributes {\n          key\n          value\n        }\n      }\n    }\n  }\n  estimatedCost {\n    subtotalAmount {\n      amount\n      currencyCode\n    }\n    totalAmount {\n      amount\n      currencyCode\n    }\n  }\n  attributes {\n    key\n    value\n  }\n  discountAllocations {\n    discountedAmount {\n      amount\n      currencyCode\n    }\n  }\n  discountCodes {\n    applicable\n    code\n  }\n}\n    ", ""])), _ImageFragmentDoc);
var _CartCreatePayloadFragmentDoc = /*#__PURE__*/gql(_templateObject3 || (_templateObject3 = /*#__PURE__*/_taggedTemplateLiteralLoose(["\n    fragment _CartCreatePayload on CartCreatePayload {\n  cart {\n    ..._Cart\n  }\n  userErrors {\n    code\n    field\n    message\n  }\n}\n    ", ""])), _CartFragmentDoc);
var _ProductFragmentDoc = /*#__PURE__*/gql(_templateObject4 || (_templateObject4 = /*#__PURE__*/_taggedTemplateLiteralLoose(["\n    fragment _Product on Product {\n  id\n  title\n  description\n  handle\n  productType\n  tags\n  options {\n    name\n    values\n  }\n  variants(first: 250) {\n    edges {\n      node {\n        id\n        title\n        availableForSale\n        quantityAvailable\n        compareAtPriceV2 {\n          amount\n          currencyCode\n        }\n        priceV2 {\n          amount\n          currencyCode\n        }\n        image {\n          ..._Image\n        }\n        selectedOptions {\n          name\n          value\n        }\n      }\n    }\n  }\n  priceRange {\n    minVariantPrice {\n      amount\n      currencyCode\n    }\n    maxVariantPrice {\n      amount\n      currencyCode\n    }\n  }\n  productType\n  onlineStoreUrl\n  availableForSale\n  images(first: 250) {\n    edges {\n      node {\n        ..._Image\n      }\n    }\n  }\n}\n    ", ""])), _ImageFragmentDoc);
var _CreateCartDocument = /*#__PURE__*/gql(_templateObject5 || (_templateObject5 = /*#__PURE__*/_taggedTemplateLiteralLoose(["\n    mutation _CreateCart {\n  cartCreate {\n    ..._CartCreatePayload\n  }\n}\n    ", ""])), _CartCreatePayloadFragmentDoc);
var _CreateCartWithLinesDocument = /*#__PURE__*/gql(_templateObject6 || (_templateObject6 = /*#__PURE__*/_taggedTemplateLiteralLoose(["\n    mutation _CreateCartWithLines($lines: [CartLineInput!]!) {\n  cartCreate(input: {lines: $lines}) {\n    ..._CartCreatePayload\n  }\n}\n    ", ""])), _CartCreatePayloadFragmentDoc);
var _AddLineItemDocument = /*#__PURE__*/gql(_templateObject7 || (_templateObject7 = /*#__PURE__*/_taggedTemplateLiteralLoose(["\n    mutation _AddLineItem($cartId: ID!, $lines: [CartLineInput!]!) {\n  cartLinesAdd(cartId: $cartId, lines: $lines) {\n    cart {\n      ..._Cart\n    }\n    userErrors {\n      code\n      field\n      message\n    }\n  }\n}\n    ", ""])), _CartFragmentDoc);
var _UpdateLineItemDocument = /*#__PURE__*/gql(_templateObject8 || (_templateObject8 = /*#__PURE__*/_taggedTemplateLiteralLoose(["\n    mutation _UpdateLineItem($cartId: ID!, $lines: [CartLineUpdateInput!]!) {\n  cartLinesUpdate(cartId: $cartId, lines: $lines) {\n    cart {\n      ..._Cart\n    }\n    userErrors {\n      code\n      field\n      message\n    }\n  }\n}\n    ", ""])), _CartFragmentDoc);
var _RemoveLineItemDocument = /*#__PURE__*/gql(_templateObject9 || (_templateObject9 = /*#__PURE__*/_taggedTemplateLiteralLoose(["\n    mutation _RemoveLineItem($cartId: ID!, $lineIds: [ID!]!) {\n  cartLinesRemove(cartId: $cartId, lineIds: $lineIds) {\n    cart {\n      ..._Cart\n    }\n    userErrors {\n      code\n      field\n      message\n    }\n  }\n}\n    ", ""])), _CartFragmentDoc);
var _CreateCustomerDocument = /*#__PURE__*/gql(_templateObject10 || (_templateObject10 = /*#__PURE__*/_taggedTemplateLiteralLoose(["\n    mutation _CreateCustomer($input: CustomerCreateInput!) {\n  customerCreate(input: $input) {\n    customer {\n      email\n    }\n    customerUserErrors {\n      code\n      field\n      message\n    }\n  }\n}\n    "])));
var _FetchCartDocument = /*#__PURE__*/gql(_templateObject11 || (_templateObject11 = /*#__PURE__*/_taggedTemplateLiteralLoose(["\n    query _FetchCart($id: ID!) {\n  cart(id: $id) {\n    ..._Cart\n  }\n}\n    ", ""])), _CartFragmentDoc);
var _GetProductByHandleDocument = /*#__PURE__*/gql(_templateObject12 || (_templateObject12 = /*#__PURE__*/_taggedTemplateLiteralLoose(["\n    query _GetProductByHandle($handle: String!) {\n  product(handle: $handle) {\n    ..._Product\n  }\n}\n    ", ""])), _ProductFragmentDoc);
var _GetAllProductsDocument = /*#__PURE__*/gql(_templateObject13 || (_templateObject13 = /*#__PURE__*/_taggedTemplateLiteralLoose(["\n    query _GetAllProducts($startAfter: String, $pageSize: Int = 250) {\n  products(first: $pageSize, after: $startAfter) {\n    edges {\n      cursor\n      node {\n        ..._Product\n      }\n    }\n  }\n}\n    ", ""])), _ProductFragmentDoc);
var _GetProductsOnCollectionDocument = /*#__PURE__*/gql(_templateObject14 || (_templateObject14 = /*#__PURE__*/_taggedTemplateLiteralLoose(["\n    query _GetProductsOnCollection($startAfter: String, $pageSize: Int = 250, $id: ID!) {\n  collection(id: $id) {\n    products(first: $pageSize, after: $startAfter) {\n      edges {\n        cursor\n        node {\n          ..._Product\n        }\n      }\n    }\n  }\n}\n    ", ""])), _ProductFragmentDoc);
var _GetCollectionsDocument = /*#__PURE__*/gql(_templateObject15 || (_templateObject15 = /*#__PURE__*/_taggedTemplateLiteralLoose(["\n    query _GetCollections {\n  collections(first: 200) {\n    edges {\n      node {\n        id\n        handle\n        title\n        products(first: 200) {\n          edges {\n            cursor\n            node {\n              ..._Product\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    ", ""])), _ProductFragmentDoc);

var defaultWrapper = function defaultWrapper(action, _operationName) {
  return action();
};

function getSdk(client, withWrapper) {
  if (withWrapper === void 0) {
    withWrapper = defaultWrapper;
  }

  return {
    _CreateCart: function _CreateCart(variables, requestHeaders) {
      return withWrapper(function (wrappedRequestHeaders) {
        return client.request(_CreateCartDocument, variables, _extends({}, requestHeaders, wrappedRequestHeaders));
      }, '_CreateCart');
    },
    _CreateCartWithLines: function _CreateCartWithLines(variables, requestHeaders) {
      return withWrapper(function (wrappedRequestHeaders) {
        return client.request(_CreateCartWithLinesDocument, variables, _extends({}, requestHeaders, wrappedRequestHeaders));
      }, '_CreateCartWithLines');
    },
    _AddLineItem: function _AddLineItem(variables, requestHeaders) {
      return withWrapper(function (wrappedRequestHeaders) {
        return client.request(_AddLineItemDocument, variables, _extends({}, requestHeaders, wrappedRequestHeaders));
      }, '_AddLineItem');
    },
    _UpdateLineItem: function _UpdateLineItem(variables, requestHeaders) {
      return withWrapper(function (wrappedRequestHeaders) {
        return client.request(_UpdateLineItemDocument, variables, _extends({}, requestHeaders, wrappedRequestHeaders));
      }, '_UpdateLineItem');
    },
    _RemoveLineItem: function _RemoveLineItem(variables, requestHeaders) {
      return withWrapper(function (wrappedRequestHeaders) {
        return client.request(_RemoveLineItemDocument, variables, _extends({}, requestHeaders, wrappedRequestHeaders));
      }, '_RemoveLineItem');
    },
    _CreateCustomer: function _CreateCustomer(variables, requestHeaders) {
      return withWrapper(function (wrappedRequestHeaders) {
        return client.request(_CreateCustomerDocument, variables, _extends({}, requestHeaders, wrappedRequestHeaders));
      }, '_CreateCustomer');
    },
    _FetchCart: function _FetchCart(variables, requestHeaders) {
      return withWrapper(function (wrappedRequestHeaders) {
        return client.request(_FetchCartDocument, variables, _extends({}, requestHeaders, wrappedRequestHeaders));
      }, '_FetchCart');
    },
    _GetProductByHandle: function _GetProductByHandle(variables, requestHeaders) {
      return withWrapper(function (wrappedRequestHeaders) {
        return client.request(_GetProductByHandleDocument, variables, _extends({}, requestHeaders, wrappedRequestHeaders));
      }, '_GetProductByHandle');
    },
    _GetAllProducts: function _GetAllProducts(variables, requestHeaders) {
      return withWrapper(function (wrappedRequestHeaders) {
        return client.request(_GetAllProductsDocument, variables, _extends({}, requestHeaders, wrappedRequestHeaders));
      }, '_GetAllProducts');
    },
    _GetProductsOnCollection: function _GetProductsOnCollection(variables, requestHeaders) {
      return withWrapper(function (wrappedRequestHeaders) {
        return client.request(_GetProductsOnCollectionDocument, variables, _extends({}, requestHeaders, wrappedRequestHeaders));
      }, '_GetProductsOnCollection');
    },
    _GetCollections: function _GetCollections(variables, requestHeaders) {
      return withWrapper(function (wrappedRequestHeaders) {
        return client.request(_GetCollectionsDocument, variables, _extends({}, requestHeaders, wrappedRequestHeaders));
      }, '_GetCollections');
    }
  };
}

var createStandardStorefrontClient = function createStandardStorefrontClient(_ref) {
  var domain = _ref.domain,
      accessToken = _ref.accessToken;
  var endpoint = "https://" + domain + "/api/2022-07/graphql";
  var graphqlClient = new GraphQLClient(endpoint, {
    headers: {
      accept: 'application/json',
      'Content-Type': 'application/json',
      'x-shopify-storefront-access-token': accessToken
    }
  });
  var generatedSdk = getSdk(graphqlClient);
  return _extends({}, generatedSdk, {
    client: graphqlClient
  });
};

export { DropProvider, StorefrontProvider, calculateCountdownState, createStandardStorefrontClient, dateOrTimestampToTimestamp, formatError, formatPrice, getFormattedTimeDelta, getTimeDelta, isApiSupported, makeAdminApiOrigin, storefrontEvents, useDrop, useEmailSubscriptionForm, useProductHelper, useStorefront, useToggleState, zeroPad };
//# sourceMappingURL=react-dropify.esm.js.map
